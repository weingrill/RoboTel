<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{c39aef1e-7c14-41dc-ad83-03bececdc52a}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// indicates the phases for the hydraulics
	phase_available:	BOOL;
	// telescope drives are ready to enable
	ready:				BOOL;
	// error stat on drive, power or hydraulics
	error:				BOOL;
	// manual, panel or remote reset
	reset:				BOOL;
	// reset from API
	remote_reset:			BOOL;
	// hydraulics warning 
	warning:			BOOL;
	// start hydraulics
	start:				BOOL;
	// start from API
	remote_start:		BOOL;
	// stop hydraulics 
	stop:				BOOL;
	// stop from API
	remote_stop:		BOOL;
	// soft start trafo
	key_switch:			BOOL;
	//	open brake
	brake_clearing:		BOOL := FALSE;
	// blink error lamp on warning
	warn_blink: 		FB_BLINK;
	// main cabinet temperature in degrees
	cabinet_temperature:	REAL;
	// measures time between soft start command and power available
	ups_input_voltage:		REAL;
	ups_input_current:		REAL;
	ups_temperature:		REAL;
	ups_battery_temperature:	REAL;
	ups_output_voltage:		REAL;
	ups_output_current:		REAL;
	ups_input_power:		REAL;
	ups_output_power:		REAL;
	
	PhaseLog:				FB_EventLog;
	TemperatureEvent:		FB_EventLog;
	
	MQTTTimer : 		TON := (PT:=T#5S);
	GetHostName:		FB_GetHostName;
	HostName: 			STRING(255);
	LightSwitch:		FB_ButtonEnable;
	Lightbutton: 		BOOL;
	bExecute:			BOOL := TRUE;
	cabinet_temperature_warning:	SR;
	
	MQTTClient:		FB_MQTTCommunication;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 
Main control loop
* Execute sub modules
* power management
* control panel switches and status lamps

* start switch activates Hydraulics and Trafo
* 
*)
GetHostName(bExecute := bExecute, sHostName => HostName);
bExecute := FALSE;
GVL_Main.isRoboTel := HostName = 'CX-4E6032';
start := GVL_Main.start_switch OR remote_start;
stop := GVL_Main.stop_switch OR remote_stop;

phase_available := GVL_Main.phase_available;
reset := GVL_Main.reset_switch OR GVL_pendant_control.reset_switch OR remote_reset;		
key_switch := GVL_Main.key_switch_remote;
brake_clearing := GVL_Main.brake_clearing;
cabinet_temperature := INT_TO_REAL(GVL_Main.main_cabinet_temperature) / 100.0;
cabinet_temperature_warning(SET1 := cabinet_temperature > 40.0,
							RESET := cabinet_temperature < 35.0);

IF start THEN
	HydraulicsControl.start := TRUE;
	// SimpleLog(Message := 'manual Hydraulics start');
END_IF
IF stop THEN
	HydraulicsControl.stop := TRUE;
	// SimpleLog(Message := 'manual Hydraulics stop');
END_IF

// telescope is ready when power available and hydraulics ok
ready := Transformer.power_OK AND HydraulicsControl.oil_pressure_OK;
		
TelescopeControl();	//
DomeControl();	//
CoverControl();	//
PendantControl();	//
NasmythControl();	//
HydraulicsControl();	//
// deactivate noisy fan if we are on manual
FanControl(enable := NOT PendantControl.manual);
ElevationControl();	//
AzimuthElevationControl();	//
DerotatorControl();	//
FilterWheelControl();	//
FocusControl();
Environment();	//
AuxiliaryControl(); //
MQTTClient();
Transformer();

IF key_switch THEN
	Transformer.start();
ELSE
	Transformer.stop();
END_IF

IF reset THEN
	Transformer.reset();
END_IF

warn_blink(ENABLE := HydraulicsControl.oil_warning OR HydraulicsControl.oil_hot, 
	Q => warning);
error := Transformer.error OR 
			HydraulicsControl.pressure_failure 
			OR (NOT phase_available)
			OR GVL_Telescope.azimut_limit_switch
			//OR PendantControl.error
			OR FanControl.error
			OR ElevationControl.error
			OR FilterWheelControl.Error
			OR DomeControl.Error
			OR Focuscontrol.Error
			OR NasmythControl.error
			OR CoverControl.Error
			OR AzimuthElevationControl.error
			OR DerotatorControl.Error
			OR GVL_Safety.Error;
// set control lights					
GVL_Main.lamp_ready := ready;
GVL_Main.lamp_error := error OR warning;
GVL_Main.lamp_power := Transformer.power_ok AND phase_available;
SafetyHandling();

ups_input_voltage 		:= GVL_MAIN.ups_input_voltage / 1000.0;
ups_input_current 		:= GVL_MAIN.ups_input_current / 1000.0;
ups_output_voltage 		:= GVL_MAIN.ups_output_voltage / 1000.0;
ups_output_current 		:= GVL_MAIN.ups_output_current / 1000.0;
ups_temperature 		:= GVL_MAIN.ups_temperature / 10.0;
ups_battery_temperature := GVL_MAIN.ups_battery_temperature / 10.0;
ups_input_power			:= ups_input_voltage * ups_input_current;
ups_output_power		:= ups_output_voltage * ups_output_current;


LightSwitch(SET := Lightbutton, Q := DomeControl.Light);

MQTTTimer(IN:=TRUE);
IF MQTTTimer.Q THEN // publish new payload every second
	MQTTTimer(IN:=FALSE);
	MQTTClient.Publish('electronics', 'base', 'MainCabinetTemperature', LREAL_TO_FMTSTR(cabinet_temperature, 2, TRUE));
	MQTTClient.Publish('electronics', 'base', 'PowerOK', BOOL_TO_STRING(Transformer.power_ok));
	MQTTClient.Publish('electronics', 'base', 'PhaseOK', BOOL_TO_STRING(phase_available));
	MQTTClient.Publish('electronics', 'base', 'MainReady', BOOL_TO_STRING(ready));
	MQTTClient.Publish('electronics', 'base', 'MasterError', BOOL_TO_STRING(error));
	MQTTClient.Publish('electronics', 'base', 'UPSInputVoltage', LREAL_TO_FMTSTR(ups_input_voltage, 3, TRUE));
	MQTTClient.Publish('electronics', 'base', 'UPSInputCurrent', LREAL_TO_FMTSTR(ups_input_current, 3, TRUE));
	MQTTClient.Publish('electronics', 'base', 'UPSInputPower', LREAL_TO_FMTSTR(ups_input_power, 3, TRUE));
	MQTTClient.Publish('electronics', 'base', 'UPSOutputVoltage', LREAL_TO_FMTSTR(ups_output_voltage, 3, TRUE));
	MQTTClient.Publish('electronics', 'base', 'UPSOutputCurrent', LREAL_TO_FMTSTR(ups_output_current, 3, TRUE));
	MQTTClient.Publish('electronics', 'base', 'UPSOutputPower', LREAL_TO_FMTSTR(ups_output_power, 3, TRUE));
	MQTTClient.Publish('electronics', 'base', 'UPSTemperature', LREAL_TO_FMTSTR(ups_temperature, 1, TRUE));
	MQTTClient.Publish('electronics', 'base', 'UPSBatteryTemperature', LREAL_TO_FMTSTR(ups_battery_temperature, 1, TRUE));
END_IF

PhaseLog(	
	Trigger := 		NOT phase_available, 
	Level := 		ADSLOG_MSGTYPE_ERROR,
	FormatString :=	'%s',
	OnMessage := 	'electrical phases:	ERROR!',
	OffLevel := 	ADSLOG_MSGTYPE_HINT,
	OffMEssage := 	'electrical phases:	active');

TemperatureEvent(	
	Trigger := 		cabinet_temperature_warning.Q1, 
	Level := 		ADSLOG_MSGTYPE_WARN,
	FormatString :=	'Main Cabinet Temperature warning:	%s',
	OnMessage := 	LREAL_TO_FMTSTR( cabinet_temperature, 1, TRUE),);]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="1303" Count="15" />
      <LineId Id="1327" Count="5" />
      <LineId Id="1458" Count="8" />
      <LineId Id="1333" Count="30" />
      <LineId Id="1457" Count="0" />
      <LineId Id="1364" Count="28" />
      <LineId Id="1452" Count="0" />
      <LineId Id="1454" Count="0" />
      <LineId Id="1453" Count="0" />
      <LineId Id="1393" Count="5" />
      <LineId Id="1524" Count="0" />
      <LineId Id="1401" Count="1" />
      <LineId Id="1467" Count="0" />
      <LineId Id="1469" Count="0" />
      <LineId Id="1412" Count="0" />
      <LineId Id="1414" Count="1" />
      <LineId Id="1455" Count="0" />
      <LineId Id="1416" Count="1" />
      <LineId Id="1456" Count="0" />
      <LineId Id="1418" Count="0" />
      <LineId Id="1429" Count="13" />
      <LineId Id="610" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>