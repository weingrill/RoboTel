<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{c39aef1e-7c14-41dc-ad83-03bececdc52a}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// indicates the phases for the hydraulics
	phase_available:	BOOL;
	// telescope drives are ready to enable
	ready:				BOOL;
	// error stat on drive, power or hydraulics
	error:				BOOL;
	// manual, panel or remote reset
	reset:				BOOL;
	// hydraulics warning 
	warning:			BOOL;
	// start hydraulics
	start:				BOOL;
	// stop hydraulics 
	stop:				BOOL;
	// soft start trafo
	key_switch:			BOOL;
	//	open brake
	brake_clearing:		BOOL := FALSE;
	// blink error lamp on warning
	warn_blink: 		FB_BLINK;
	// main cabinet temperature in degrees
	cabinet_temperature:	REAL;
	// measures time between soft start command and power available
	ups_input_voltage:		REAL;
	ups_input_current:		REAL;
	ups_temperature:		REAL;
	ups_battery_temperature:		REAL;
	ups_output_voltage:		REAL;
	ups_output_current:		REAL;

	PhaseLog:				FB_EventLog;
	TemperatureEvent:		FB_EventLog;
	
	MQTTTimer : 		TON := (PT:=T#5S);
	sPayloadPub: 		STRING(255);
	GetHostName:		FB_GetHostName;
	HostName: 			STRING(255);
	LightSwitch:		FB_ButtonEnable;
	Lightbutton: 		BOOL;
	bExecute:			BOOL := TRUE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 
Main control loop
* Execute sub modules
* power management
* control panel switches and status lamps

* start switch activates Hydraulics and Trafo
* 
*)
GetHostName(bExecute := bExecute, sHostName => HostName);
bExecute := FALSE;
GVL_Main.isRoboTel := HostName = 'CX-4E6032';
start := GVL_Main.start_switch;
stop := GVL_Main.stop_switch;

phase_available := GVL_Main.phase_available;
IF GVL_Main.start_switch THEN
	HydraulicsControl.start := TRUE;
	// SimpleLog(Message := 'manual Hydraulics start');
END_IF
IF GVL_Main.stop_switch THEN
	HydraulicsControl.stop := TRUE;
	// SimpleLog(Message := 'manual Hydraulics stop');
END_IF
reset := GVL_Main.reset_switch OR GVL_pendant_control.reset_switch;		
key_switch := GVL_Main.key_switch_remote;
brake_clearing := GVL_Main.brake_clearing;
cabinet_temperature := INT_TO_REAL(GVL_Main.main_cabinet_temperature) / 100.0;

// telescope is ready when power available and hydraulics ok
ready := Transformer.power_OK AND HydraulicsControl.oil_pressure_OK;
IF ready THEN
	// SimpleLog(Message := 'power and Hydraulics ready');
END_IF
		
TelescopeControl();	//
DomeControl();	//
CoverControl();	//
PendantControl();	//
NasmythControl();	//
HydraulicsControl();	//
// deactivate noisy fan if we are on manual
FanControl(enable := NOT PendantControl.manual);	//
ElevationControl();	//
AzimuthElevationControl();	//
DerotatorControl();	//
FilterWheelControl();	//
FocusControl();
Environment();	//
AuxiliaryControl(); //
MQTTCommunication();
Transformer();

IF key_switch THEN
	Transformer.start();
ELSE
	Transformer.stop();
END_IF

warn_blink(ENABLE := HydraulicsControl.oil_warning OR HydraulicsControl.oil_hot, 
	Q => warning);
error := Transformer.error OR 
			HydraulicsControl.pressure_failure 
			OR (NOT phase_available)
			OR GVL_Telescope.azimut_limit_switch
			//OR PendantControl.error
			OR FanControl.error
			OR ElevationControl.error
			OR FilterWheelControl.Error
			OR DomeControl.Error
			OR Focuscontrol.Error
			OR NasmythControl.error
			OR CoverControl.Error
			OR AzimuthElevationControl.error
			OR DerotatorControl.Error
			OR GVL_Safety.Error;
// set control lights					
GVL_Main.lamp_ready := ready;
GVL_Main.lamp_error := error OR warning;
GVL_Main.lamp_power := Transformer.power_ok AND phase_available;
SafetyHandling();

ups_input_voltage 		:= GVL_MAIN.ups_input_voltage / 1000.0;
ups_input_current 		:= GVL_MAIN.ups_input_current / 1000.0;
ups_output_voltage 		:= GVL_MAIN.ups_output_voltage / 1000.0;
ups_output_current 		:= GVL_MAIN.ups_output_current / 1000.0;
ups_temperature 		:= GVL_MAIN.ups_temperature / 10.0;
ups_battery_temperature := GVL_MAIN.ups_battery_temperature / 10.0;

LightSwitch(SET := Lightbutton, Q := DomeControl.Light);

MQTTTimer(IN:=TRUE);
IF MQTTTimer.Q THEN // publish new payload every second
	MQTTTimer(IN:=FALSE);
	sPayloadPub := 'electronics,location=base,host=CX-4E6032,module=MAIN ';
	sPayloadPub := APPEND(sPayloadPub, 'MainCabinetTemperature=', LREAL_TO_FMTSTR(cabinet_temperature, 2, TRUE));
	sPayloadPub := APPEND(sPayloadPub, ',PowerOK=', BOOL_TO_STRING(Transformer.power_ok));
	sPayloadPub := APPEND(sPayloadPub, ',PhaseOK=', BOOL_TO_STRING(phase_available));
	
	MQTTCommunication.fbMqttClient.Publish(	
					sTopic:= 'RoboTel/Telemetry', 
					pPayload:= ADR(sPayloadPub), 
					nPayloadSize:= LEN2(ADR(sPayloadPub)),
					eQoS:= TcIotMqttQos.AtMostOnceDelivery,
					bRetain:= FALSE, 
					bQueue:= FALSE );

	sPayloadPub := 'electronics,location=base,host=CX-4E6032,module=MAIN ';
	sPayloadPub := APPEND(sPayloadPub, 'UPSInputVoltage=', LREAL_TO_FMTSTR(ups_input_voltage, 3, TRUE));
	sPayloadPub := APPEND(sPayloadPub, ',UPSInputCurrent=', LREAL_TO_FMTSTR(ups_input_current, 3, TRUE));
	sPayloadPub := APPEND(sPayloadPub, ',UPSOutputVoltage=', LREAL_TO_FMTSTR(ups_output_voltage, 3, TRUE));
	sPayloadPub := APPEND(sPayloadPub, ',UPSOutputCurrent=', LREAL_TO_FMTSTR(ups_output_current, 3, TRUE));
	sPayloadPub := APPEND(sPayloadPub, ',UPSTemperature=', LREAL_TO_FMTSTR(ups_temperature, 1, TRUE));
	sPayloadPub := APPEND(sPayloadPub, ',UPSBatteryTemperature=', LREAL_TO_FMTSTR(ups_battery_temperature, 1, TRUE));
	
	
	MQTTCommunication.fbMqttClient.Publish(	
					sTopic:= 'RoboTel/Telemetry', 
					pPayload:= ADR(sPayloadPub), 
					nPayloadSize:= LEN2(ADR(sPayloadPub)),
					eQoS:= TcIotMqttQos.AtMostOnceDelivery,
					bRetain:= FALSE, 
					bQueue:= FALSE );

END_IF

PhaseLog(	
	Trigger := 		NOT phase_available, 
	Level := 		ADSLOG_MSGTYPE_ERROR,
	FormatString :=	'%s',
	OnMessage := 	'electrical phases:	ERROR!',
	OffLevel := 	ADSLOG_MSGTYPE_HINT,
	OffMEssage := 	'electrical phases:	active');

TemperatureEvent(	
	Trigger := 		cabinet_temperature > 40.0, 
	Level := 		ADSLOG_MSGTYPE_WARN,
	FormatString :=	'Main Cabinet Temperature warning:	%s',
	OnMessage := 	LREAL_TO_FMTSTR( cabinet_temperature, 1, TRUE),);]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="3" />
      <LineId Id="64" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="944" Count="1" />
      <LineId Id="948" Count="1" />
      <LineId Id="1055" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="598" Count="0" />
      <LineId Id="523" Count="0" />
      <LineId Id="525" Count="1" />
      <LineId Id="599" Count="0" />
      <LineId Id="527" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="602" Count="1" />
      <LineId Id="600" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="1001" Count="0" />
      <LineId Id="701" Count="0" />
      <LineId Id="741" Count="0" />
      <LineId Id="1112" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="1113" Count="0" />
      <LineId Id="1115" Count="1" />
      <LineId Id="1114" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="521" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="562" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="437" Count="5" />
      <LineId Id="482" Count="0" />
      <LineId Id="443" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="866" Count="2" />
      <LineId Id="871" Count="3" />
      <LineId Id="864" Count="1" />
      <LineId Id="743" Count="0" />
      <LineId Id="745" Count="2" />
      <LineId Id="799" Count="1" />
      <LineId Id="802" Count="0" />
      <LineId Id="813" Count="0" />
      <LineId Id="804" Count="7" />
      <LineId Id="875" Count="3" />
      <LineId Id="888" Count="4" />
      <LineId Id="880" Count="7" />
      <LineId Id="793" Count="0" />
      <LineId Id="744" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="656" Count="4" />
      <LineId Id="662" Count="0" />
      <LineId Id="661" Count="0" />
      <LineId Id="649" Count="0" />
      <LineId Id="606" Count="4" />
    </LineIds>
  </POU>
</TcPlcObject>