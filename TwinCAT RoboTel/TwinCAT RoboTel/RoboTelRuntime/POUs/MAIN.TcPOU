<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="MAIN" Id="{c39aef1e-7c14-41dc-ad83-03bececdc52a}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	power_OK,
	phase_available,
	ready,
	power_failure,
	error,
	reset, 
	warning,
	start, 
	stop,
	key_switch,
	brake_clearing : BOOL := FALSE;
	warn_blink : FB_BLINK;
	// TCS remote start;
	remote_start:	BOOL := FALSE;
	// TCS remote stop;
	remote_stop:	BOOL := FALSE;
	power_watchdog : TON;
	ready_state: RS;
	cabinet_temperature:	REAL;
	power_timer:		FB_Timer;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 
Main control loop
* Execute sub modules
* power management
* control panel switches and status lamps

* start switch activates Hydraulics and Trafo
* 
*)
power_OK := GVL_main.power_available;
phase_available := GVL_Main.phase_available;
start := GVL_Main.start_switch OR remote_start;
stop := GVL_Main.stop_switch OR remote_stop;
reset := GVL_Main.reset_switch OR GVL_pendant_control.reset_switch;		
key_switch := GVL_Main.key_switch_remote;
brake_clearing := GVL_MAIN.brake_clearing;

IF stop THEN
	start := FALSE;
END_IF
// telescope is ready when power available and hydraulics ok
ready_state(SET := power_OK AND HydraulicsControl.oil_pressure_OK AND start,
			RESET1 := stop OR remote_stop OR error OR HydraulicsControl.pressure_failure,
			Q1 => ready);
		
TelescopeControl();
//TODO: implement dome control
//DomeControl();
PendantControl();
HydraulicsControl();
FanControl(enable := NOT PendantControl.manual);

GVL_Main.softstart_trafo := key_switch AND NOT power_failure;
power_timer(bStart := key_switch, bStop := power_OK);
power_watchdog(IN := GVL_Main.softstart_trafo AND NOT power_OK,
				PT := T#2S,
				Q => power_failure);
warn_blink(ENABLE := HydraulicsControl.oil_warning, Q => warning);
error := power_failure OR 
			HydraulicsControl.pressure_failure OR 
			(NOT phase_available)
			OR GVL_Telescope.azimut_limit_switch
			OR PendantControl.error
			OR FanControl.error
			OR ElevationControl.error
			OR GVL_Safety.Error;
// set control lights					
GVL_Main.lamp_ready := ready;
GVL_Main.lamp_error := error OR warning;
GVL_Main.lamp_power := power_ok;
cabinet_temperature := INT_TO_REAL(GVL_Main.main_cabinet_temperature) / 100.0;
SafetyHandling();]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="3" />
      <LineId Id="64" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="157" Count="1" />
      <LineId Id="166" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="169" Count="1" />
      <LineId Id="160" Count="2" />
      <LineId Id="105" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="71" Count="2" />
      <LineId Id="80" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="77" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>