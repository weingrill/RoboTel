<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="AzimuthElevationControl" Id="{8e08648a-b748-4448-9dcc-aa13dfcf6a06}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM AzimuthElevationControl
VAR_INPUT
	// decrease azimuth
	left:		BOOL;
	// increase azimuth
	right: 		BOOL;
	// reset the axis
	Reset: 		BOOL;
	// enable the axis and its position control loop
	Enable:		BOOL;
	// Move azimuth to given position
	MoveAxis:	BOOL;
	// Home the axis
	HomeAxis:	BOOL;
	// enable tracking
	Tracking:	BOOL;
	// position to move the axis to
	position: 	LREAL;
END_VAR
VAR_OUTPUT
	// error state of the axis
	error: 			BOOL;
	// error ID of the axis
	ErrorID:		UDINT;
	// actual_position of the axis
	act_position:	LREAL;
	// is the axis calibrated
	calibrated:		BOOL;
	// drive is ready
	ready:			BOOL;
	// time to reach target position
	slewtime:		LREAL;
END_VAR
VAR
	AzimuthAxis:		FB_Axis2;
	AzimuthCalibration: MC_SetPosition;
	fbSoEReset:			FB_SoEReset;
	AzimuthAxisEvent: 	FB_EventLog;
	// delay until commutator angle is measured
	readydelay:			TON;
	HomeDelay:			FB_TONTP;
	TorqueError:		TON := (PT := T#3S);
	azimuth_torque: 	REAL;
	TorqueWarning:		FB_EventLog;
	CalibrationEvent:	FB_Eventlog;
	ReadParameter:		MC_ReadParameter;
	getlastposition:	BOOL := TRUE;
	bSoEReset:			BOOL;
END_VAR
VAR CONSTANT
	// reference position for homing
	// homing_position:		LREAL := 439.0; // was 442 - -21.21 = 463.21; 463 + 24 = 439
	// current position of the calibration cam encoder zero index. Apply an offset here if necessary
	calibration_position:	LREAL := 393.0; // was 156.1195; // 180.0 - 24.0;
END_VAR
VAR PERSISTENT
	last_position:	LREAL := -1.0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Azimuth Axis control section
Power must be on and brake must be open for the axis to operate
*)

IF Enable THEN
	ElevationControl.enable := TRUE;
END_IF

// generate the ready signal after enabling the drive
readydelay(IN :=  AzimuthAxis.Enable, PT := T#6000MS, Q=> ready);

// limit the input position angle
position := LIMIT(0.0, position, 450.0);

// conduct the calibrated signal
calibrated := AzimuthAxis.Calibrated;

IF Calibrated OR Error THEN
	HomeAxis := FALSE;
	getlastposition := FALSE;
END_IF
	
IF HomeAxis THEN
	position := calibration_position;
END_IF

(*
// move to calibration_position after homing
HomeDelay(IN := Calibrated, PT1 := T#5S, PT2 := T#100MS);
*)
IF HomeDelay.Q THEN
	position := calibration_position;
	MoveAxis := TRUE;
END_IF

// perform a recalibration, if we pass the reference mark on the encoder
AzimuthCalibration(
	Axis := GVL_Telescope.AzimuthAxisRef,
	Execute := getlastposition AND last_position>=0.0 AND NOT Calibrated,
	Position := last_position);

IF AzimuthCalibration.Done THEN
	getlastposition := FALSE;
END_IF

IF Calibrated THEN
	last_position := act_position;
END_IF
	
// deactivate limit switches on homing
MC_SetAcceptBlockedDriveSignal(
	Axis := GVL_Telescope.AzimuthAxisRef, 
	Enable := HomeAxis);

AzimuthAxis(	
	Enable := 			enable AND HydraulicsControl.brake_open,
	Reset := 			reset,
	MoveAxis :=			MoveAxis,
	HomeAxis := 		HomeAxis,
	Tracking :=			Tracking,
	Position := 		position, 
	Enable_Positive := 	NOT GVL_Telescope.azimut_limit_switch AND (GVL_Telescope.Azimuth_inputs.1 OR HomeAxis),
	Enable_Negative := 	NOT GVL_Telescope.azimut_limit_switch AND GVL_Telescope.Azimuth_inputs.0,
	Jog_Forward :=		right,
	Jog_Backwards := 	left,
	bCalibrationCam :=	NOT GVL_Telescope.Azimuth_inputs.1,
	ActualPosition => 	act_position,
	Error => 			error,
	ErrorID => 			ErrorID,
	AxisRef :=			GVL_Telescope.AzimuthAxisRef);

IF Error THEN
	HydraulicsControl.close_brake := TRUE;
END_IF

bSoEReset := GVL_Telescope.Azimuth_diagnostic = 16#0000F10B OR GVL_Telescope.Azimuth_diagnostic = 16#0000F601;

IF bSoEReset THEN
	fbSoEReset(
		Axis := GVL_Telescope.AzimuthAxisRef,
		Execute := TRUE,
		Timeout := DEFAULT_ADS_TIMEOUT);
 	IF NOT fbSoEReset.Busy THEN
		fbSoEReset(Axis := GVL_Telescope.AzimuthAxisRef, Execute := FALSE);
		bSoEReset := FALSE;
	END_IF
END_IF 

	
IF AzimuthAxis.MoveDone THEN
	MoveAxis := FALSE;
END_IF

IF AzimuthAxis.HomeDone THEN
	HomeAxis := FALSE;
END_IF
	
IF AzimuthAxis.ResetDone THEN
	reset := FALSE;
END_IF

ReadParameter(	Axis := GVL_Telescope.AzimuthAxisRef, Enable := AzimuthAxis.InMotion, 
				ParameterNumber := MC_AxisParameter.AxisRemainingTimeToGo, 
				ReadMode := E_ReadMode.READMODE_CYCLIC);
IF ReadParameter.Valid THEN
	slewtime := ReadParameter.Value;
END_IF

azimuth_torque := GVL_Telescope.Azimuth_torque / 10.0;
TorqueError(IN := ABS(azimuth_torque) > 50.0);


AzimuthAxisEvent(	
	Trigger := 		Error, 
	Level := 		ADSLOG_MSGTYPE_ERROR,
	FormatString :=	'Azimuth Axis Error: %s',
	OnMessage := 	NCError_TO_STRING(ErrorID));
	
TorqueWarning(	
	Trigger := 		TorqueError.Q, 
	Level := 		ADSLOG_MSGTYPE_WARN,
	FormatString :=	'%s',
	OnMessage := 	'Azimuth torque is high.');
	
CalibrationEvent(
	Trigger := 		Calibrated, 
	Level := 		ADSLOG_MSGTYPE_HINT,
	FormatString :=	'%s',
	OnMessage := 	'Azimuth axis is calibrated.');
				]]></ST>
    </Implementation>
    <LineIds Name="AzimuthElevationControl">
      <LineId Id="172" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="340" Count="1" />
      <LineId Id="284" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="244" Count="1" />
      <LineId Id="683" Count="0" />
      <LineId Id="246" Count="4" />
      <LineId Id="624" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="393" Count="6" />
      <LineId Id="625" Count="0" />
      <LineId Id="287" Count="4" />
      <LineId Id="701" Count="0" />
      <LineId Id="700" Count="0" />
      <LineId Id="702" Count="5" />
      <LineId Id="680" Count="0" />
      <LineId Id="239" Count="3" />
      <LineId Id="115" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="104" Count="3" />
      <LineId Id="237" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="177" Count="1" />
      <LineId Id="684" Count="0" />
      <LineId Id="686" Count="11" />
      <LineId Id="685" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="158" Count="10" />
      <LineId Id="564" Count="0" />
      <LineId Id="566" Count="1" />
      <LineId Id="569" Count="0" />
      <LineId Id="565" Count="0" />
      <LineId Id="570" Count="1" />
      <LineId Id="446" Count="0" />
      <LineId Id="448" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="447" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="80" Count="2" />
      <LineId Id="456" Count="0" />
      <LineId Id="451" Count="4" />
      <LineId Id="505" Count="1" />
      <LineId Id="508" Count="2" />
      <LineId Id="507" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>