<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FocusControl" Id="{d08d0458-4211-4cc5-9e25-2b5c152fb2d4}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM FocusControl
VAR_INPUT
	// enable the axis
	enable: BOOL;
	// Move M2 closer to M1
	inward: 	BOOL;
	// Move M2 away from M1
	outward: 	BOOL;	
	// reset the axis(-error)
	reset: 		BOOL;
	// move the axis to new position
	MoveAxis:	BOOL;
	// calibrate the focus axis
	HomeAxis:	BOOL;
	// focus position in millimeters
	position: 		LREAL;
END_VAR

VAR_OUTPUT
	// true if absolute calibration
	Calibrated:	BOOL;
	// true if error
	Error: 		BOOL;
	// ID of NC axis error
	ErrorID:	UDINT;
	// ready signal = drive ready + standstill
	Ready:	BOOL;
END_VAR

VAR
	FocusDelay:			TON;
	BrakeDelay:			TON;
	FocusAxis:			FB_Axis2;
	actual_position:	LREAL;
	FocusUnlock:		BOOL;
	FocusUnlocked:		BOOL;
	SetPosition:		MC_SetPosition;
	HomingMode:			MC_HomingMode := MC_DefaultHoming;
	MQTTTimer : 		TON := (PT:=T#5S);
	FocusAxisEvent:		FB_EventLog;
	CalibrationEvent:	FB_EventLog;
END_VAR

VAR CONSTANT
	// reference position for homing
	homing_position:		LREAL := 97.96; // 107,50 - 9,54
	//calibration_position:	LREAL := 0.0;
	tolerance:				LREAL := 0.005;
END_VAR
VAR PERSISTENT
	last_position:	LREAL := -1.0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
Focus Control Unit
spindle gear: 5mm
brake: 86 61103H00 Var. 0005 Index C; 24VDC geglattet 0,25 A P1672/R7
motor: Faulhaber ; Schönaich ; 3557K024CR; 454  431 ; Made in germany ==> 5300 rpm
gear: Faulhaber ; MINIMOTOR SA ; swiss made ; 38/1S  43:1 ; 033896  503
Focus is locked by default
*)

GVL_Telescope.focus_unlock := FocusUnlock OR enable;

// wait until the focus is unlocked for n milliseconds
FocusDelay(IN := GVL_Telescope.focus_unlock, PT := T#500MS, Q => FocusUnlocked);
// wait for brake until we are at rest
BrakeDelay(IN := NOT FocusAxis.Busy AND FocusAxis.StandStill, PT := T#4000MS);

// if we are on automatic mode then position the filterwheel
IF Telescopecontrol.telescope_mode = E_TelescopeMode.automatic AND NOT FocusUnlock THEN
	IF FocusAxis.Calibrated THEN
		IF ABS(position - actual_position) > tolerance THEN
			IF FocusAxis.Ready THEN
				MoveAxis := TRUE;
			ELSE
				Enable := TRUE;
			END_IF
		END_IF
		// disable the drive and lock the brake, if we stand for more than n seconds
		IF BrakeDelay.Q THEN
			Enable := FALSE;
		END_IF
		// store actual position, if we are calibrated and locked
		IF NOT GVL_Telescope.focus_unlock THEN
			last_position := actual_position;
		END_IF
	ELSE // not calibrated
		IF FocusAxis.Ready THEN
			HomeAxis := TRUE;
		END_IF
	END_IF
END_IF

IF HomeAxis THEN
	IF last_position > 0.0 THEN
		HomingMode := MC_ForceCalibration; // MC_Direct
		position := last_position;
		SetPosition.Execute := TRUE;
	ELSE
		HomingMode := MC_DefaultHoming;
		position := homing_position;
		SetPosition.Execute := FALSE;
	END_IF
ELSE
	SetPosition.Execute := FALSE;	
END_IF

// deactivate limit switches on homing
MC_SetAcceptBlockedDriveSignal(
	Axis := GVL_Telescope.FocusAxisRef, 
	Enable := HomeAxis);

SetPosition(
	Axis := GVL_Telescope.FocusAxisRef, 
	Position := last_position);
	
FocusAxis(	
	Enable := 			FocusUnlocked,
	Reset := 			reset,
	MoveAxis := 		MoveAxis AND FocusUnlocked,
	HomeAxis :=			HomeAxis AND FocusUnlocked,
	HomingMode :=		HomingMode,
	Position := 		position,
	Velocity :=			5.0,
	Enable_Positive := 	NOT GVL_Telescope.focus_limit_far OR HomeAxis,
	Enable_Negative := 	NOT GVL_Telescope.focus_limit_near,
	Jog_Forward :=		outward AND FocusUnlocked,
	Jog_Backwards := 	inward AND FocusUnlocked,
	bCalibrationCam :=  GVL_Telescope.focus_limit_far,
	ActualPosition => 	actual_position,
	Error =>			error,
	ErrorID =>			ErrorID,
	AxisRef :=			GVL_Telescope.FocusAxisRef);	

IF FocusAxis.MoveDone THEN
	MoveAxis := FALSE;
END_IF

IF FocusAxis.HomeDone THEN
	HomeAxis := FALSE;
	Enable := FALSE;
	last_position := position;
END_IF
	
IF FocusAxis.ResetDone THEN
	reset := FALSE;
END_IF

IF FocusAxis.Calibrated OR Error THEN
	HomeAxis := FALSE;
END_IF

IF Error THEN
	last_position := -1.0;
	//FocusAxis.Calibrated := FALSE;
	Calibrated := FALSE;
END_IF

Calibrated := FocusAxis.Calibrated;

Ready := FocusAxis.Ready AND FocusAxis.StandStill OR NOT GVL_Telescope.focus_unlock;

MQTTTimer(IN:=TRUE);
IF MQTTTimer.Q THEN // publish new payload every second
	MQTTTimer(IN:=FALSE);
	MAIN.MQTTClient.Publish('telescope', 'dome', 'FocusPosition', LREAL_TO_FMTSTR(actual_position, 5, TRUE));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'FocusCalibrated', BOOL_TO_STRING(Calibrated));	
	MAIN.MQTTClient.Publish('telescope', 'dome', 'FocusReady', BOOL_TO_STRING(Ready));	
END_IF

FocusAxisEvent(	
	Trigger := 		FocusAxis.Error, 
	Level := 		ADSLOG_MSGTYPE_ERROR,
	FormatString :=	'Focus Axis Error: %s',
	OnMessage := 	NCError_TO_STRING(ErrorID),
	OffMEssage := 	'OK',
	OffLevel := 	ADSLOG_MSGTYPE_HINT);

CalibrationEvent(
	Trigger :=	Calibrated,
	Level :=	ADSLOG_MSGTYPE_HINT,
	OnMessage := 'Focus is calibrated.'
	);]]></ST>
    </Implementation>
    <LineIds Name="FocusControl">
      <LineId Id="359" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="638" Count="0" />
      <LineId Id="801" Count="49" />
      <LineId Id="1004" Count="0" />
      <LineId Id="851" Count="2" />
      <LineId Id="855" Count="45" />
      <LineId Id="557" Count="0" />
      <LineId Id="559" Count="3" />
      <LineId Id="564" Count="0" />
      <LineId Id="574" Count="0" />
      <LineId Id="558" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="193" Count="5" />
      <LineId Id="156" Count="0" />
      <LineId Id="484" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="486" Count="2" />
      <LineId Id="485" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>