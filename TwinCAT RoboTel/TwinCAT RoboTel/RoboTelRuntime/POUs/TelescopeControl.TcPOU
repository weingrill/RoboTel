<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="TelescopeControl" Id="{6a4f2e3a-c9ee-4352-b4f6-4f9d94b2c472}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM TelescopeControl
VAR_INPUT
(*
TCS interface section
see https://gitlab.aip.de/bmk10k/telescope_firmware/snippets/5
*)
	
	// boolean, true: Power on, false: power off
	power: 		BOOL;
	// boolean, true: go to home position, unset track/goto if active
	gohome: 	BOOL;
	// boolean, true: go into park position, ready to stow telescope, unset track/goto
	park: 		BOOL;
	// boolean, TRUE: MOVE telescope TO last ra/de AND start tracking. Set 'goto' TO FALSE, IF TRUE. FALSE: Stop tracking as soon as possible
	track: 		BOOL;
	// boolean, TRUE: MOVE telescope TO tau/de AND stop there. Set track TO FALSE, IF TRUE. FALSE: no effect.)
	goto:		BOOL;	
	// move the telescope to a given az-alt position
	slew:		BOOL;
	// boolean, TRUE: Stop motion OF telescope immediately, set goto AND track TO FALSE. FALSE: Allow motion OF telescope again via track/goto).
	stop:		BOOL;	
	// internal command: telescope is moved to pumping position
	pumping:	BOOL;
	// initiates hard-reset on all axis
	reset:		BOOL;
	// apparent right ascension, degrees, double
	rightascension:			LREAL := (00.0 + 08.0/60.0 + 23.17/3600.0) *15.0;	
	// apparent declination, degrees, double
	declination: 		LREAL := 29.0 + 05.0/60.0 + 26.99/3600.0;
	// desired elevation of the telescope pointing 
	elevation:	LREAL := 45.0;
	// desired azimut of the telescope pointing 
	azimuth:	LREAL := 320.0;
	// absolute offset for elevation
	elevation_offset:	LREAL := 0.0;
	// absolute offset for azimuth
	azimuth_offset : 	LREAL := 0.0;
	// absolute offset for time
	time_offset: 		LREAL := 0.0;
	// offset for the de-rotator
	derotator_offset:	LREAL := 180.0;
	// Nasmyth port 1 or 2
	Nasmyth_port: USINT;
	// Focus position in mm
	focus_position: LREAL := 77.000;
END_VAR
VAR
	// manual or automatic operation of the telescope
	telescope_mode : E_TelescopeMode;	
	// actual command from the TCS
	TCS_command: 	E_TCSCommand;
	// current Julian Date calculated from system time
	jd:	LREAL;
	// image derotation
	derotation_calc:	LREAL;
	// local siderial time calculated from Julian date
	lst:	LREAL;
	// values calulated when ra and dec are set by TCS
	elevation_calc:	LREAL; 
	azimuth_calc:	LREAL;
	// values calulated when azimuth and elevation are set by TCS
	rightascension_calc:	LREAL;
	declination_calc:	LREAL;
	
	
	(* Hour Angle part *)
	Hourangle_calc: LREAL;
	
	fbTime: FB_AstroClock;
	
	eq2hor2:	FB_EQ2HOR2;
	hor2eq:		FB_HOR2EQ;
	
	// triggers power-failure event
	powerfailure: 	BOOL;
	powerontrigger:		R_TRIG;
	powerofftrigger:		F_TRIG;
	poweronwarning:	TP;
	poweron_reset:	TP;
	power_timeout:	TON;
	
	
	TCSpowerEvent,
	TCSgohomeEvent,
	TCSparkEvent,
	TCSgotoEvent,
	TCStrackEvent,
	TCSstopEvent,
	AltitudeEvent,
	TCSreadyEvent: FB_Eventlog;
	FocusDelay: TON := (PT:=T#5S);
	MQTTTimer : TON := (PT:=T#5S);
	// rotational velocity of the derotator
	DerotatorVelocity: LREAL;
	
	StatusWord, LastStatus:	UDINT;
END_VAR
VAR_OUTPUT
	//		TRUE, IF telescope can be operated
	ready:	BOOL; 
	// indicates an error on one of the components
	error:	BOOL;	
	//error id of axis
	errorid:	UDINT;	
	//TRUE, IF telescope is in fast-MOVE phase (includes pole-swap)
	sliding: BOOL;	
	//TRUE, IF telescope is on tracking position AND currently tracking.
	tracking: BOOL;	
	//TRUE, IF telescope is AT rest.
	stopped: BOOL;	
	// Current tau/dec. in degrees.
	//decurrent, taucurrent: LREAL; 
	// (all degrees, azimuth 0=S, W>0)
	//racurrent: LREAL; 
	elevation_current:	LREAL;
	azimuth_current:	LREAL;
	//	(time in sec. to reach the goto/track position)
	slewtime: LREAL; 
	// 	(TIME in sec. available UNTIL pole-swap necessary).
	//tracktime: LREAL;	
	// True: telescope is calibrated
	homed: BOOL;
END_VAR
VAR CONSTANT
(* Potsdam:
	longitude: LREAL := 13.104589;
	latitude: LREAL := 52.404977;
*)
(* RoboTel site : *)
	// telescope site longitude, source: Google 
	longitude: LREAL := 13.101867;
	// telescope site latitude, source: Google
	latitude: LREAL := 52.404940;
	// telescope site height above sea level: estimated
	altitude: LREAL := 33.0;
	//siderial_velocity: LREAL := 360.0 / 86164.099;
	//position_velocity: LREAL := 1.0;
	elevation_park: LREAL := 70.0;
	azimuth_park: LREAL := 359.999;

	elevation_home: LREAL := 45.0;
	azimuth_home: LREAL := 180.0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TelescopeAuxiliary();

// get the system time
fbTime();
jd := DateTime2JD(fbTime.time_RTCEX2);
lst := CT2LST(longitude, jd);
// set reset state either by hardware (key pressed) or by software (set by e.g. tcs)
IF GVL_Main.reset_switch THEN
	reset := TRUE;
END_IF


IF ElevationControl.error THEN
	errorid := ElevationControl.ErrorID;
	ElevationControl.reset := reset;
ELSIF AzimuthElevationControl.error THEN
	errorid := AzimuthElevationControl.ErrorID;
	AzimuthElevationControl.Reset := reset;
ELSIF FilterWheelControl.Error THEN
	errorid := FilterWheelControl.ErrorID;
	FilterWheelControl.Reset := reset;
ELSIF DomeControl.Error THEN
	errorid := DomeControl.ErrorID;
	DomeControl.Reset := reset;
ELSIF Focuscontrol.Error THEN
	errorid := Focuscontrol.ErrorID;
	FocusControl.reset := reset;
ELSIF DerotatorControl.Error THEN
	errorid := DerotatorControl.ErrorID;
	DerotatorControl.reset := reset;
END_IF

error := ElevationControl.error OR 
		 AzimuthElevationControl.error OR
		 FilterWheelControl.Error OR
		 // DomeControl.Error OR
		 Focuscontrol.Error OR
		 DerotatorControl.Error;

slewtime := MAX(MAX(ElevationControl.slewtime, AzimuthElevationControl.slewtime), DerotatorControl.slewtime);
			
IF error THEN
	gohome := 	FALSE;
	park  := 	FALSE;
	track := 	FALSE;
	goto := 	FALSE;
	slew := 	FALSE;
	pumping :=	FALSE;
END_IF
		 
IF ElevationControl.error THEN
	ElevationControl.enable := FALSE;
	AzimuthElevationControl.enable := FALSE;
	HydraulicsControl.close_brake := TRUE;
	power := FALSE;
END_IF

(*
IF AzimuthElevationControl.error THEN
	AzimuthElevationControl.enable := FALSE;
END_IF
*)

// determine the operation of the telescope based on the switch set
IF GVL_pendant_control.key_switch THEN
	telescope_mode := E_TelescopeMode.manual;
ELSE
	telescope_mode := E_TelescopeMode.automatic;
END_IF

eq2hor2(alpha := rightascension,
	delta := declination,
	lon := longitude,
	lat := latitude,
	JD := jd + time_offset,
	alt => elevation_calc,
	az => azimuth_calc,
	ha => hourangle_calc);

azimuth_current := AzimuthElevationControl.act_position;
elevation_current := ElevationControl.act_position;

hor2eq(alt := elevation_current, 
		az := azimuth_current,
		jd := jd,
		lat := latitude,
		lon := longitude,
		altitude := altitude,
		ra => rightascension_calc,
		dec => declination_calc);		

// TODO check sign; offset is applied later
derotation_calc := F_DerotatorPosition2(azimuth_calc, elevation_calc, declination_calc, latitude);
IF Tracking THEN
	DerotatorVelocity := F_Derotatorvelocity(elevation_calc, azimuth_calc, latitude);
ELSE
	DerotatorVelocity := 10.0;
END_IF
		
poweronwarning(IN := power OR (NOT ElevationControl.enable AND HydraulicsControl.brake_open), PT := T#250MS);
powerontrigger(CLK := power);
powerofftrigger(CLK := power);
poweron_reset(IN := power AND NOT PendantControl.manual, PT := T#50MS);
// park the telescope after 12 hours
power_timeout(IN := power, PT := T#12H);
IF power_timeout.Q THEN
	power := FALSE;
END_IF
// reset fan
FanControl.reset := poweron_reset.Q OR reset;
CoverControl.reset := poweron_reset.Q OR reset;

IF Nasmyth_port = 1 THEN
	NasmythControl.right := FALSE;
	IF NasmythControl.Nasmyth_left THEN
		NasmythControl.left := FALSE;
		NasmythControl.enable := FALSE;
	ELSE
		NasmythControl.left := TRUE;
		NasmythControl.enable := TRUE;
	END_IF
ELSIF Nasmyth_port = 2 THEN
	NasmythControl.left := FALSE;
    IF NasMythControl.Nasmyth_right THEN
		NasmythControl.right := FALSE;
		NasmythControl.enable := FALSE;
	ELSE
		NasmythControl.right := TRUE;
		NasmythControl.enable := TRUE;
	END_IF
ELSE
	NasmythControl.right := FALSE;
	NasmythControl.left := FALSE;
	NasmythControl.enable := FALSE;	
END_IF
	
IF power THEN
	poweron();
ELSE
	poweroff();
END_IF

IF NOT power AND NOT PendantControl.manual THEN
	// if the power is deactivatied and we are on automatic, ...
	IF CoverControl.isclosed THEN
		// if the covers are closed, disable them
		CoverControl.close := FALSE;
		CoverControl.enable := FALSE;
(*	ELSIF Environment.WeatherBad THEN
		// if the covers are not closed and the weather is bad, close them
		CoverControl.enable := TRUE;
		CoverControl.close := TRUE; *)
	END_IF
END_IF
		
// set TCS_command according to state variables ordered by precedence
IF track THEN
	TCS_command := E_TCSCommand.track;
	goto := FALSE;
	slew := FALSE;
ELSIF goto THEN
	TCS_command := E_TCSCommand.goto;
	track := FALSE;
	slew := FALSE;
ELSIF gohome THEN
	TCS_command := E_TCSCommand.gohome;
	goto := FALSE;
	track := FALSE;
	slew := FALSE;
ELSIF slew THEN
	TCS_command := E_TCSCommand.slew;
	goto := FALSE;
	track := FALSE;
ELSIF park THEN
	TCS_command := E_TCSCommand.park;
	goto := FALSE;
	track := FALSE;
	slew := FALSE;
ELSIF pumping THEN
	TCS_command := E_TCSCommand.pumping;
ELSIF stop THEN
	TCS_command := E_TCSCommand.stop;
	goto := FALSE;
	track := FALSE;
	slew := FALSE;
	gohome := FALSE;
	park := FALSE;
ELSE
	TCS_command := E_TCSCommand.no_command;
	ElevationControl.MoveAxis := FALSE;
	AzimuthElevationControl.MoveAxis := FALSE;
END_IF

IF NOT track THEN
	ElevationControl.Tracking := FALSE;
	AzimuthElevationControl.Tracking := FALSE;
	DerotatorControl.Tracking := FALSE;
END_IF

IF TCS_command = E_TCSCommand.park THEN
	parktelescope();
ELSIF TCS_command = E_TCSCommand.gohome THEN
	hometelescope();	
ELSIF TCS_command = E_TCSCommand.track THEN
	ElevationControl.position := elevation_calc + elevation_offset;
	AzimuthElevationControl.position := azimuth_calc + azimuth_offset;
	DerotatorControl.position := derotation_calc + derotator_offset;
	DerotatorControl.Velocity := DerotatorVelocity;
	ElevationControl.Tracking := TRUE;
	AzimuthElevationControl.Tracking := TRUE;
	DerotatorControl.Tracking := TRUE;
	
ELSIF TCS_command = E_TCSCommand.goto THEN
	gototelescope();
ELSIF TCS_command = E_TCSCommand.slew THEN
	slewtelescope();
ELSIF TCS_command = E_TCSCommand.pumping THEN
	gotopumping();
END_IF
 
sliding := ElevationControl.MoveAxis OR 
			AzimuthElevationControl.MoveAxis OR
			DerotatorControl.MoveAxis;
			
tracking := ElevationControl.Tracking AND 
			AzimuthElevationControl.Tracking AND
			DerotatorControl.Tracking;
			
stopped :=  ElevationControl.ElevationAxis.StandStill AND 
			AzimuthElevationControl.AzimuthAxis.StandStill AND
			DerotatorControl.DerotatorAxis.StandStill;
			
homed := ElevationControl.Calibrated AND
			AzimuthElevationControl.calibrated AND
			FilterWheelControl.Calibrated AND
			FocusControl.Calibrated AND
			DerotatorControl.Calibrated;
			
ready := homed AND CoverControl.isopen AND HydraulicsControl.brake_open AND NOT error;

IF NOT error THEN
	reset := FALSE;
END_IF

GVL_Telescope.horn := poweronwarning.Q OR Pendantcontrol.horn;

MQTTTimer(IN:=TRUE);
IF MQTTTimer.Q THEN // publish new payload every second
	MQTTTimer(IN:=FALSE);

	MAIN.MQTTClient.Publish('telescope', 'dome', 'Azimuth', LREAL_TO_FMTSTR(azimuth_current, 5, TRUE));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'Elevation', LREAL_TO_FMTSTR(elevation_current, 5, TRUE));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'HourAngle', LREAL_TO_FMTSTR(hourangle_calc, 5, TRUE));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'RightAscension', LREAL_TO_FMTSTR(rightascension_calc, 5, TRUE));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'Declination', LREAL_TO_FMTSTR(declination_calc, 5, TRUE));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'Derotator', LREAL_TO_FMTSTR(derotation_calc, 5, TRUE));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'errorid',		UDINT_TO_STRING(errorid));
END_IF

StatusWord.0 := error;
StatusWord.1 := ready;
StatusWord.2 := sliding;
StatusWord.3 := tracking;
StatusWord.4 := stopped;
StatusWord.5 := homed;

IF StatusWord<>LastStatus THEN // publish new payload every second
	LastStatus := StatusWord;
	MAIN.MQTTClient.Publish('telescope', 'dome', 'error',		BOOL_TO_STRING(error));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'ready',		BOOL_TO_STRING(ready));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'sliding',		BOOL_TO_STRING(sliding));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'tracking', 	BOOL_TO_STRING(tracking));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'stopped',		BOOL_TO_STRING(stopped));
	MAIN.MQTTClient.Publish('telescope', 'dome', 'homed',		BOOL_TO_STRING(homed));
END_IF


(* Event function blocks start here. *)
TCSpowerEvent(	Trigger := powerfailure, 
				Level := ADSLOG_MSGTYPE_ERROR,
				FormatString := 'power %s',
				OnMessage := 'Failure',
				OffMessage := 'OK');

TCSgohomeEvent(	Trigger := gohome, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'GOHOME %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed');
TCSparkEvent(	Trigger := park, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'PARK %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed');
TCSgotoEvent(	Trigger := goto, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'GOTO %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed');
TCStrackEvent(	Trigger := track, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'TRACK %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed');
TCSstopEvent(	Trigger := stop, 
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := 'STOP %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed',
				OffLevel := ADSLOG_MSGTYPE_HINT);
AltitudeEvent(	Trigger := power AND elevation_calc<0.0, 
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := '%s',
				OnMessage := 'Target below horizon',
				OffMEssage := '');
TCSreadyEvent(	Trigger := power AND ready, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := '%s',
				OnMessage := 'RoboTel startup finished');]]></ST>
    </Implementation>
    <Method Name="gotopumping" Id="{6208024a-fbb3-40ba-982b-c39f896215a8}">
      <Declaration><![CDATA[METHOD gotopumping : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ElevationControl.position := elevation;
ElevationControl.MoveAxis := TRUE;
AzimuthElevationControl.position := azimuth;
AzimuthElevationControl.MoveAxis := TRUE;
DerotatorControl.position := 90.0;
DerotatorControl.MoveAxis := TRUE;

IF ElevationControl.ElevationAxis.StopDone AND 
	AzimuthElevationControl.AzimuthAxis.StopDone AND 
	DerotatorControl.DerotatorAxis.StopDone THEN
	ElevationControl.MoveAxis := FALSE;
	AzimuthElevationControl.MoveAxis := FALSE;
	DerotatorControl.MoveAxis := FALSE;
	pumping := FALSE;
	gotopumping := TRUE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="gototelescope" Id="{c7053474-39ba-4cc3-ab24-2521b02cf8f4}">
      <Declaration><![CDATA[METHOD gototelescope : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ElevationControl.position := elevation_calc + elevation_offset;
ElevationControl.MoveAxis := TRUE;
AzimuthElevationControl.position := azimuth_calc + azimuth_offset;
AzimuthElevationControl.MoveAxis := TRUE;
DerotatorControl.position := derotation_calc + derotator_offset;
DerotatorControl.MoveAxis := TRUE;
IF ElevationControl.ElevationAxis.MoveDone AND 
	AzimuthElevationControl.AzimuthAxis.MoveDone AND
	DerotatorControl.DerotatorAxis.MoveDone THEN
	ElevationControl.MoveAxis := FALSE;
	AzimuthElevationControl.MoveAxis := FALSE;
	DerotatorControl.MoveAxis := FALSE;
	goto := FALSE;
	gototelescope := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="hometelescope" Id="{2c96c3e4-ffc4-4f92-b3af-46d302446b40}">
      <Declaration><![CDATA[METHOD hometelescope : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ElevationControl.position := elevation_home;
ElevationControl.MoveAxis := TRUE;
AzimuthElevationControl.position := azimuth_home;
AzimuthElevationControl.MoveAxis := TRUE;
IF ElevationControl.ElevationAxis.StopDone AND AzimuthElevationControl.AzimuthAxis.StopDone THEN
	gohome := FALSE;
	hometelescope := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="parktelescope" Id="{99ae1f40-9696-469a-b290-774914abbb25}">
      <Declaration><![CDATA[METHOD parktelescope : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[gohome := 	FALSE;
track := 	FALSE;
goto := 	FALSE;
slew := 	FALSE;
pumping :=	FALSE;

ElevationControl.position := elevation_park;
AzimuthElevationControl.position := azimuth_park;
ElevationControl.MoveAxis := TRUE;
AzimuthElevationControl.MoveAxis := TRUE;
CoverControl.close := TRUE;
IF stopped and CoverControl.isclosed THEN
	park := FALSE;
	power := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="poweroff" Id="{7801bc9a-aa08-4645-aed9-20fc5aa5a24f}">
      <Declaration><![CDATA[METHOD poweroff : BOOL
VAR_INPUT
END_VAR
VAR
	power_is_off: 	BOOL;
	offtrigger:		R_TRIG;
	PowerOffEvent: 	FB_Eventlog;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[gohome := 	FALSE;
park  := 	FALSE;
track := 	FALSE;
goto := 	FALSE;
slew := 	FALSE;
pumping :=	FALSE;
// disable azimuth
// disbale elevation (closes brake)
IF stopped THEN
	AzimuthElevationControl.enable := FALSE;
	ElevationControl.enable := FALSE;
END_IF
// disable Focus
IF FocusControl.FocusAxis.StandStill THEN
	Focuscontrol.enable := FALSE;
END_IF
// disable filterwheel
FilterWheelControl.Enable := FALSE;
// disable derotator
DerotatorControl.enable := FALSE;

IF NOT ElevationControl.enable THEN
	// disable hydraulics
	HydraulicsControl.close_brake := TRUE;
	HydraulicsControl.stop := TRUE;
END_IF

IF HydraulicsControl.brake_closed THEN
	// close cover
	CoverControl.close := TRUE;	
END_IF

power_is_off := NOT power 
	AND NOT AzimuthElevationControl.enable 
	AND NOT ElevationControl.enable 
//	AND NOT FocusControl.enable
	AND NOT FilterWheelControl.Enable
	AND NOT DerotatorControl.enable
	AND HydraulicsControl.brake_closed
	AND CoverControl.isclosed;

poweroff := power_is_off;

offtrigger(CLK := power_is_off);
	
PowerOffEvent(Trigger := FALSE, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := '%s',
				OnMessage := 'RoboTel shutdown finished');
]]></ST>
      </Implementation>
    </Method>
    <Method Name="poweron" Id="{34114692-caf6-4cf5-8270-8b1671f5dd0a}">
      <Declaration><![CDATA[METHOD poweron : BOOL
VAR_INPUT
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Main.brake_clearing THEN
	powerfailure := TRUE;
	TCSpowerEvent.OnMessage := 'failure: brake clearing not set';
	power := FALSE;
ELSIF NOT Transformer.power_OK THEN
	powerfailure := TRUE;
	TCSpowerEvent.OnMessage := 'failure: main power failure';
	power := FALSE;
ELSIF NOT Main.phase_available THEN
	powerfailure := TRUE;
	TCSpowerEvent.OnMessage := 'failure: hydraulics power failure';
	power := FALSE;
ELSE
	powerfailure := FALSE;		
END_IF
// enable hydraulics
HydraulicsControl.start := TRUE;
// open cover
// COVER MUST BE OPENED FOR A SUCCESSFUL WAKE & SHAKE COMMAND!
CoverControl.enable := TRUE;
//CoverControl.reset := poweron_reset.Q;
Covercontrol.open := TRUE;
IF Covercontrol.isopen THEN
	Covercontrol.open := FALSE;
END_IF
// enable elevation enable azimuth

IF MAIN.ready AND CoverControl.isopen THEN
	HydraulicsControl.open_brake := TRUE;
	ElevationControl.enable := TRUE;
	AzimuthElevationControl.enable := TRUE;
END_IF

IF ElevationControl.Ready AND NOT ElevationControl.Calibrated THEN
	ElevationControl.HomeAxis := TRUE;
END_IF

IF AzimuthElevationControl.ready AND NOT AzimuthElevationControl.calibrated THEN
	AzimuthElevationControl.HomeAxis := TRUE;
END_IF

// if the dome is not calibrated while the power is on, start calibration
IF NOT DomeControl.Calibrated THEN
	DomeControl.HomeAxis := TRUE;
ELSE
	DomeControl.HomeAxis := FALSE;
END_IF

// enable derotator
IF ElevationControl.Ready THEN
	DerotatorControl.enable := TRUE;
	DerotatorControl.HomeAxis := DerotatorControl.Ready AND NOT DerotatorControl.Calibrated;
END_IF

// enable filterwheel after Derotator Axis to avoid additional torque
IF DerotatorControl.Calibrated THEN
	FilterWheelControl.Enable := TRUE;
	FilterWheelControl.HomeAxis := NOT FilterWheelControl.Calibrated;
END_IF

// enable focus
FocusControl.enable := TRUE;
IF FocusControl.ready AND NOT FocusControl.Calibrated THEN
	FocusControl.HomeAxis := TRUE;
END_IF
FocusDelay(IN := FocusControl.Calibrated AND FocusControl.Ready);
IF FocusDelay.Q THEN
	FocusControl.position := focus_position;
	FocusControl.MoveAxis := ABS(FocusControl.actual_position - focus_position) > 0.005;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="slewtelescope" Id="{e66a400f-15f7-407b-9ae1-f4d90da8099d}">
      <Declaration><![CDATA[METHOD slewtelescope : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ElevationControl.position := elevation;
ElevationControl.MoveAxis := TRUE;
AzimuthElevationControl.position := azimuth;
AzimuthElevationControl.MoveAxis := TRUE;
DerotatorControl.position := derotator_offset;
DerotatorControl.MoveAxis := TRUE;
IF ElevationControl.ElevationAxis.MoveDone 
	AND AzimuthElevationControl.AzimuthAxis.MoveDone 
	AND DerotatorControl.DerotatorAxis.MoveDone THEN
	ElevationControl.MoveAxis := FALSE;
	AzimuthElevationControl.MoveAxis := FALSE;
	DerotatorControl.MoveAxis := FALSE;
	slew := FALSE;
	slewtelescope := TRUE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="TelescopeControl">
      <LineId Id="5012" Count="1" />
      <LineId Id="58" Count="0" />
      <LineId Id="3290" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="628" Count="1" />
      <LineId Id="7470" Count="1" />
      <LineId Id="645" Count="0" />
      <LineId Id="4249" Count="1" />
      <LineId Id="7318" Count="0" />
      <LineId Id="4251" Count="0" />
      <LineId Id="4301" Count="0" />
      <LineId Id="7319" Count="0" />
      <LineId Id="4253" Count="0" />
      <LineId Id="4302" Count="0" />
      <LineId Id="7320" Count="0" />
      <LineId Id="4312" Count="1" />
      <LineId Id="7321" Count="0" />
      <LineId Id="4314" Count="1" />
      <LineId Id="7322" Count="0" />
      <LineId Id="4316" Count="1" />
      <LineId Id="7323" Count="0" />
      <LineId Id="4318" Count="0" />
      <LineId Id="4252" Count="0" />
      <LineId Id="6575" Count="6" />
      <LineId Id="6601" Count="0" />
      <LineId Id="6600" Count="0" />
      <LineId Id="6598" Count="0" />
      <LineId Id="4330" Count="0" />
      <LineId Id="6587" Count="5" />
      <LineId Id="6586" Count="0" />
      <LineId Id="6584" Count="0" />
      <LineId Id="4246" Count="1" />
      <LineId Id="5528" Count="1" />
      <LineId Id="6602" Count="0" />
      <LineId Id="4248" Count="0" />
      <LineId Id="6779" Count="0" />
      <LineId Id="6402" Count="0" />
      <LineId Id="6404" Count="1" />
      <LineId Id="6409" Count="0" />
      <LineId Id="6403" Count="0" />
      <LineId Id="1116" Count="0" />
      <LineId Id="647" Count="0" />
      <LineId Id="635" Count="1" />
      <LineId Id="640" Count="0" />
      <LineId Id="3084" Count="0" />
      <LineId Id="637" Count="0" />
      <LineId Id="1794" Count="0" />
      <LineId Id="1282" Count="0" />
      <LineId Id="1795" Count="3" />
      <LineId Id="2008" Count="2" />
      <LineId Id="3301" Count="2" />
      <LineId Id="3520" Count="0" />
      <LineId Id="2011" Count="0" />
      <LineId Id="3521" Count="4" />
      <LineId Id="3528" Count="1" />
      <LineId Id="6202" Count="0" />
      <LineId Id="6200" Count="0" />
      <LineId Id="4243" Count="0" />
      <LineId Id="6570" Count="4" />
      <LineId Id="6201" Count="0" />
      <LineId Id="4075" Count="0" />
      <LineId Id="5185" Count="0" />
      <LineId Id="4076" Count="0" />
      <LineId Id="4242" Count="0" />
      <LineId Id="6610" Count="0" />
      <LineId Id="6608" Count="1" />
      <LineId Id="6611" Count="1" />
      <LineId Id="4347" Count="0" />
      <LineId Id="4346" Count="0" />
      <LineId Id="4835" Count="0" />
      <LineId Id="6606" Count="1" />
      <LineId Id="7305" Count="0" />
      <LineId Id="7291" Count="1" />
      <LineId Id="7296" Count="0" />
      <LineId Id="7294" Count="0" />
      <LineId Id="7304" Count="0" />
      <LineId Id="7298" Count="0" />
      <LineId Id="7293" Count="0" />
      <LineId Id="7285" Count="0" />
      <LineId Id="7306" Count="0" />
      <LineId Id="7299" Count="0" />
      <LineId Id="7307" Count="1" />
      <LineId Id="7302" Count="0" />
      <LineId Id="7287" Count="0" />
      <LineId Id="7286" Count="0" />
      <LineId Id="7289" Count="0" />
      <LineId Id="7309" Count="0" />
      <LineId Id="7311" Count="2" />
      <LineId Id="7284" Count="0" />
      <LineId Id="3591" Count="0" />
      <LineId Id="3547" Count="0" />
      <LineId Id="4504" Count="0" />
      <LineId Id="3755" Count="0" />
      <LineId Id="7324" Count="0" />
      <LineId Id="3549" Count="0" />
      <LineId Id="5191" Count="0" />
      <LineId Id="3519" Count="0" />
      <LineId Id="6367" Count="0" />
      <LineId Id="4323" Count="0" />
      <LineId Id="6368" Count="0" />
      <LineId Id="4325" Count="0" />
      <LineId Id="4493" Count="0" />
      <LineId Id="6363" Count="0" />
      <LineId Id="6369" Count="0" />
      <LineId Id="6366" Count="0" />
      <LineId Id="6365" Count="0" />
      <LineId Id="4326" Count="0" />
      <LineId Id="4324" Count="0" />
      <LineId Id="3784" Count="0" />
      <LineId Id="1499" Count="0" />
      <LineId Id="1501" Count="0" />
      <LineId Id="1527" Count="0" />
      <LineId Id="4283" Count="0" />
      <LineId Id="6377" Count="0" />
      <LineId Id="1528" Count="1" />
      <LineId Id="4282" Count="0" />
      <LineId Id="6378" Count="0" />
      <LineId Id="1513" Count="0" />
      <LineId Id="1526" Count="0" />
      <LineId Id="4275" Count="1" />
      <LineId Id="6379" Count="0" />
      <LineId Id="6374" Count="2" />
      <LineId Id="6380" Count="0" />
      <LineId Id="1547" Count="1" />
      <LineId Id="4272" Count="1" />
      <LineId Id="6381" Count="0" />
      <LineId Id="2867" Count="1" />
      <LineId Id="1524" Count="1" />
      <LineId Id="4284" Count="1" />
      <LineId Id="6382" Count="0" />
      <LineId Id="4286" Count="1" />
      <LineId Id="1511" Count="0" />
      <LineId Id="1519" Count="0" />
      <LineId Id="4290" Count="1" />
      <LineId Id="1509" Count="0" />
      <LineId Id="4294" Count="0" />
      <LineId Id="3532" Count="0" />
      <LineId Id="4297" Count="1" />
      <LineId Id="6205" Count="0" />
      <LineId Id="4296" Count="0" />
      <LineId Id="4299" Count="0" />
      <LineId Id="3533" Count="0" />
      <LineId Id="4235" Count="0" />
      <LineId Id="3541" Count="0" />
      <LineId Id="4239" Count="0" />
      <LineId Id="3920" Count="0" />
      <LineId Id="5364" Count="1" />
      <LineId Id="6203" Count="0" />
      <LineId Id="6567" Count="0" />
      <LineId Id="5357" Count="0" />
      <LineId Id="5367" Count="0" />
      <LineId Id="6197" Count="0" />
      <LineId Id="4240" Count="0" />
      <LineId Id="3928" Count="0" />
      <LineId Id="6383" Count="1" />
      <LineId Id="7476" Count="0" />
      <LineId Id="6022" Count="0" />
      <LineId Id="7477" Count="0" />
      <LineId Id="3535" Count="0" />
      <LineId Id="3540" Count="0" />
      <LineId Id="3539" Count="0" />
      <LineId Id="7626" Count="0" />
      <LineId Id="7628" Count="0" />
      <LineId Id="7632" Count="0" />
      <LineId Id="4256" Count="0" />
      <LineId Id="7624" Count="1" />
      <LineId Id="7631" Count="0" />
      <LineId Id="4255" Count="0" />
      <LineId Id="7621" Count="1" />
      <LineId Id="7630" Count="0" />
      <LineId Id="7279" Count="3" />
      <LineId Id="4257" Count="0" />
      <LineId Id="7629" Count="0" />
      <LineId Id="6942" Count="0" />
      <LineId Id="7472" Count="3" />
      <LineId Id="7133" Count="0" />
      <LineId Id="5167" Count="0" />
      <LineId Id="4662" Count="3" />
      <LineId Id="4837" Count="1" />
      <LineId Id="4841" Count="0" />
      <LineId Id="4853" Count="0" />
      <LineId Id="4855" Count="0" />
      <LineId Id="4857" Count="0" />
      <LineId Id="6780" Count="0" />
      <LineId Id="7316" Count="0" />
      <LineId Id="4656" Count="0" />
      <LineId Id="7090" Count="0" />
      <LineId Id="7093" Count="4" />
      <LineId Id="7091" Count="0" />
      <LineId Id="7098" Count="3" />
      <LineId Id="7103" Count="4" />
      <LineId Id="7132" Count="0" />
      <LineId Id="7092" Count="0" />
      <LineId Id="3530" Count="1" />
      <LineId Id="3583" Count="2" />
      <LineId Id="6778" Count="0" />
      <LineId Id="5530" Count="0" />
      <LineId Id="3085" Count="0" />
      <LineId Id="931" Count="1" />
      <LineId Id="1179" Count="0" />
      <LineId Id="933" Count="3" />
      <LineId Id="1180" Count="0" />
      <LineId Id="937" Count="0" />
      <LineId Id="1183" Count="0" />
      <LineId Id="939" Count="1" />
      <LineId Id="1181" Count="0" />
      <LineId Id="941" Count="0" />
      <LineId Id="1184" Count="0" />
      <LineId Id="943" Count="1" />
      <LineId Id="1182" Count="0" />
      <LineId Id="945" Count="0" />
      <LineId Id="1185" Count="0" />
      <LineId Id="947" Count="2" />
      <LineId Id="1187" Count="0" />
      <LineId Id="1186" Count="0" />
      <LineId Id="1209" Count="0" />
      <LineId Id="1491" Count="4" />
      <LineId Id="6773" Count="2" />
      <LineId Id="3293" Count="0" />
    </LineIds>
    <LineIds Name="TelescopeControl.gotopumping">
      <LineId Id="6" Count="13" />
      <LineId Id="22" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TelescopeControl.gototelescope">
      <LineId Id="6" Count="12" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TelescopeControl.hometelescope">
      <LineId Id="6" Count="5" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TelescopeControl.parktelescope">
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="3" />
      <LineId Id="14" Count="0" />
      <LineId Id="6" Count="3" />
      <LineId Id="22" Count="0" />
      <LineId Id="10" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TelescopeControl.poweroff">
      <LineId Id="6" Count="6" />
      <LineId Id="28" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="84" Count="3" />
      <LineId Id="18" Count="3" />
      <LineId Id="49" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="41" Count="2" />
      <LineId Id="40" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="57" Count="2" />
      <LineId Id="53" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="66" Count="2" />
      <LineId Id="64" Count="0" />
      <LineId Id="70" Count="0" />
    </LineIds>
    <LineIds Name="TelescopeControl.poweron">
      <LineId Id="6" Count="25" />
      <LineId Id="82" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="40" Count="10" />
      <LineId Id="77" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="51" Count="22" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TelescopeControl.slewtelescope">
      <LineId Id="6" Count="12" />
      <LineId Id="21" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>