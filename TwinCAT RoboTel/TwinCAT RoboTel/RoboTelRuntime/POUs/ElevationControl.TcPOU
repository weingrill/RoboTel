<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="ElevationControl" Id="{c0371b19-3d1d-4f20-bd19-ce60539d69cd}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM ElevationControl
VAR_INPUT
	// increase the eleveation
	up:			BOOL;
	// decrease the elevation
	down:		BOOL;
	// reset an error
	reset:		BOOL;
	// enable the axis
	enable: 	BOOL;
	// issue axis calibration
	home:		BOOL;
	// set position of the axis in degrees
	position:	LREAL;
END_VAR
VAR_OUTPUT
	Ready:		BOOL;
END_VAR
VAR
	// move axis command
	MoveAxis:	BOOL;
	// calibrate the focus axis
	HomeAxis:	BOOL;
	ElevationAxis:		FB_Axis2;
	ElevationCalibration: MC_SetPosition;
	// drive error condition
	error: 				BOOL;
	// actual position of the elevation axis
	act_position: 		LREAL;
	// error ID of the elevation axis
	ErrorID: 			UDINT;
	readydelay:			TON;
	ElevationAxisEvent: FB_Eventlog;
	ElevationVelEvent: FB_Eventlog;
END_VAR
VAR CONSTANT
	// reference position for homing
	homing_position:		LREAL := 90.0; // 95.0?
	// current position of the calibration cam. Apply an offset here if necessary
	calibration_position:	LREAL := 45.0;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
enablestate (SET := TelescopeControl.power OR PendantControl.Elevation_enable,
			RESET1 := Error OR Reset,
			Q1 => Enable);
*)
// limit the position input to a sane value
position := LIMIT(0.0, position, 90.0);

IF Enable OR TelescopeControl.power THEN
	HydraulicsControl.open_brake := TRUE;
END_IF
// TODO Elevation Axis Homing does not work
(*
IF ElevationAxis.Ready AND NOT ElevationAxis.Calibrated THEN
	HomeAxis := TRUE;
END_IF
*)
IF ElevationAxis.Calibrated OR Error THEN
	HomeAxis := FALSE;
END_IF
	
IF HomeAxis THEN
	position := homing_position;
END_IF
// if NOT Enabled and ActVelo>0 then close_brake
IF NOT enable AND GVL_Telescope.ElevationAxisRef.NcToPlc.ActVelo>1.0 THEN
	HydraulicsControl.close_brake := TRUE;
END_IF

// deactivate limit switches on homing
MC_SetAcceptBlockedDriveSignal(
	Axis := GVL_Telescope.ElevationAxisRef, 
	Enable := HomeAxis);

(*
// perform recalibration on encoder reference signal
ElevationCalibration(
	Axis := GVL_Telescope.ElevationAxisRef,
	Execute := GVL_Telescope.Elevation_calibration,
	Position := calibration_position); // TODO: Options := ST_SetPositionOptions.ClearPositionLag
*)

ElevationAxis(
	Enable := 			HydraulicsControl.brake_open,
	Reset := 			reset,
	MoveAxis :=			MoveAxis,
	HomeAxis :=			HomeAxis,
	Position := 		position, 
	Enable_Positive :=  GVL_Telescope.Elevation_inputs.0 OR HomeAxis,
	Enable_Negative := 	GVL_Telescope.Elevation_inputs.1,
	Jog_Forward :=		up,
	Jog_Backwards := 	down,
	bCalibrationCam :=	NOT GVL_Telescope.Elevation_inputs.0,
	ActualPosition => 	act_position,
	Error => 			error,
	ErrorID => 			ErrorID,
	AxisRef :=			GVL_Telescope.ElevationAxisRef);


IF ElevationAxis.MoveDone THEN
	MoveAxis := FALSE;
END_IF

IF ElevationAxis.HomeDone THEN
	HomeAxis := FALSE;
END_IF
	
IF ElevationAxis.ResetDone THEN
	reset := FALSE;
END_IF

readydelay(IN :=  HydraulicsControl.brake_open, PT := T#6000MS, Q=> ready);
			
ElevationAxisEvent(	Trigger := Error, 
				Level := ADSLOG_MSGTYPE_ERROR,
				FormatString := 'Elevation Axis Error: %s',
				OnMessage := NCError_TO_STRING(ErrorID));
				
ElevationAxisEvent(	Trigger := NOT enable AND GVL_Telescope.ElevationAxisRef.NcToPlc.ActVelo>1.0, 
				Level := ADSLOG_MSGTYPE_ERROR,
				FormatString := '%s',
				OnMessage := 'Elevation moving without command!');
]]></ST>
    </Implementation>
    <LineIds Name="ElevationControl">
      <LineId Id="389" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="377" Count="1" />
      <LineId Id="380" Count="0" />
      <LineId Id="379" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="234" Count="1" />
      <LineId Id="238" Count="0" />
      <LineId Id="404" Count="0" />
      <LineId Id="247" Count="5" />
      <LineId Id="254" Count="5" />
      <LineId Id="340" Count="0" />
      <LineId Id="390" Count="2" />
      <LineId Id="394" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="291" Count="1" />
      <LineId Id="381" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="284" Count="1" />
      <LineId Id="281" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="184" Count="2" />
      <LineId Id="277" Count="0" />
      <LineId Id="187" Count="4" />
      <LineId Id="300" Count="0" />
      <LineId Id="192" Count="2" />
      <LineId Id="135" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="214" Count="11" />
      <LineId Id="385" Count="1" />
      <LineId Id="136" Count="0" />
      <LineId Id="156" Count="2" />
      <LineId Id="160" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="396" Count="3" />
      <LineId Id="395" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>