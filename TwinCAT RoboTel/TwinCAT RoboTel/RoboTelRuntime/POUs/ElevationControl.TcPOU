<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="ElevationControl" Id="{c0371b19-3d1d-4f20-bd19-ce60539d69cd}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM ElevationControl
VAR_INPUT
	// increase the eleveation
	up:			BOOL;
	// decrease the elevation
	down:		BOOL;
	// reset an error
	reset:		BOOL;
	// enable the axis
	enable: 	BOOL;
	// set position of the axis in degrees
	position:	LREAL;
	// move axis command
	MoveAxis:	BOOL;
	// calibrate the focus axis
	HomeAxis:	BOOL;
	// enable tracking
	Tracking:	BOOL;
END_VAR
VAR_OUTPUT
	// axis is ready to operate
	Ready:			BOOL;
	// drive error condition
	error: 			BOOL;
	// warning condition
	warning:		BOOL;
	// actual position of the elevation axis
	act_position: 	LREAL;
	// error ID of the elevation axis
	ErrorID: 		UDINT;
	// axis is calibrated
	Calibrated:		BOOL;
END_VAR
VAR
	ElevationAxis:			FB_Axis2;
	ElevationCalibration: 	MC_SetPosition;
	// delay until commutator angle is measured
	readydelay:				TON;
	HomeDelay:				TON := (PT := T#5S);
	R_TRIG_HomeDelay:		R_TRIG;
	ElevationAxisEvent: 	FB_Eventlog;
	ElevationVelEvent: 		FB_Eventlog;
	SimpleLog:				FB_SimpleLog;
END_VAR
VAR CONSTANT
	// reference position for homing
	homing_position:		LREAL := 90.0; // 95.0?
	// current position of the calibration cam. Apply an offset here if necessary
	calibration_position:	LREAL := 45.0;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[// limit the position input to a sane value
position := LIMIT(0.0, position, 90.0);

IF Enable THEN
	HydraulicsControl.open_brake := TRUE;
END_IF

IF ElevationAxis.Calibrated OR Error THEN
	HomeAxis := FALSE;
END_IF

Calibrated := ElevationAxis.Calibrated;

IF HomeAxis THEN
	position := homing_position;
END_IF

HomeDelay(IN := Calibrated AND ElevationAxis.StandStill);

R_TRIG_HomeDelay(CLK := Calibrated);
(*
IF R_TRIG_HomeDelay.Q THEN
	position := calibration_position;
	MoveAxis := TRUE;
END_IF*)
// if NOT Enabled and ActVelo>1 then issue a warning
warning := NOT enable AND GVL_Telescope.ElevationAxisRef.NcToPlc.ActVelo>2.0;

// deactivate limit switches on homing
MC_SetAcceptBlockedDriveSignal(
	Axis := GVL_Telescope.ElevationAxisRef, 
	Enable := HomeAxis);

// perform recalibration on encoder reference signal (positive latch of elevation probe)

ElevationCalibration(
	Axis := GVL_Telescope.ElevationAxisRef,
	Execute := GVL_Telescope.Elevation_Probe>0 AND NOT HomeAxis,
	Position := calibration_position); // TODO: Options := ST_SetPositionOptions.ClearPositionLag

IF GVL_Telescope.Elevation_Probe>0 THEN
	SimpleLog(Message := 'Elevation re-calibrated');
END_IF
	
ElevationAxis(
	Enable := 			enable AND HydraulicsControl.brake_open,
	Reset := 			reset,
	MoveAxis :=			MoveAxis,
	HomeAxis :=			HomeAxis,
	Tracking :=			Tracking,
	Position := 		position, 
	Enable_Positive :=  GVL_Telescope.Elevation_inputs.0 OR HomeAxis,
	Enable_Negative := 	GVL_Telescope.Elevation_inputs.1,
	Jog_Forward :=		up,
	Jog_Backwards := 	down,
	bCalibrationCam :=	NOT GVL_Telescope.Elevation_inputs.0,
	ActualPosition => 	act_position,
	Error => 			error,
	ErrorID => 			ErrorID,
	AxisRef :=			GVL_Telescope.ElevationAxisRef);

IF ElevationAxis.MoveDone THEN
	MoveAxis := FALSE;
END_IF

IF ElevationAxis.HomeDone THEN
	HomeAxis := FALSE;
END_IF
	
IF ElevationAxis.ResetDone THEN
	reset := FALSE;
END_IF

// FIXME fix position bug
IF Calibrated AND act_position > 95.0 THEN
	Error := TRUE;
	ErrorID := 16#0001;
END_IF

readydelay(IN :=  HydraulicsControl.brake_open, PT := T#6000MS, Q=> ready);
			
ElevationAxisEvent(	Trigger := Error, 
				Level := ADSLOG_MSGTYPE_ERROR,
				FormatString := 'Elevation Axis Error: %s',
				OnMessage := NCError_TO_STRING(ErrorID));
(*				
ElevationAxisEvent(	Trigger := warning, 
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := '%s',
				OnMessage := 'Elevation moving without command!'); 
*)
]]></ST>
    </Implementation>
    <LineIds Name="ElevationControl">
      <LineId Id="379" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="451" Count="0" />
      <LineId Id="234" Count="1" />
      <LineId Id="238" Count="0" />
      <LineId Id="251" Count="1" />
      <LineId Id="254" Count="1" />
      <LineId Id="558" Count="1" />
      <LineId Id="626" Count="0" />
      <LineId Id="257" Count="2" />
      <LineId Id="630" Count="0" />
      <LineId Id="624" Count="0" />
      <LineId Id="632" Count="0" />
      <LineId Id="631" Count="0" />
      <LineId Id="633" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="627" Count="0" />
      <LineId Id="629" Count="0" />
      <LineId Id="628" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="291" Count="1" />
      <LineId Id="381" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="619" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="284" Count="1" />
      <LineId Id="614" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="617" Count="1" />
      <LineId Id="615" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="184" Count="2" />
      <LineId Id="277" Count="0" />
      <LineId Id="562" Count="0" />
      <LineId Id="187" Count="4" />
      <LineId Id="300" Count="0" />
      <LineId Id="192" Count="2" />
      <LineId Id="135" Count="0" />
      <LineId Id="214" Count="11" />
      <LineId Id="613" Count="0" />
      <LineId Id="611" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="620" Count="0" />
      <LineId Id="622" Count="0" />
      <LineId Id="621" Count="0" />
      <LineId Id="612" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="156" Count="2" />
      <LineId Id="160" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="396" Count="3" />
      <LineId Id="634" Count="0" />
      <LineId Id="395" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>