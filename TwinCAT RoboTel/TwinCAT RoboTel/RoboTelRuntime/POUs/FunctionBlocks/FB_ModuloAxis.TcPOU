<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="FB_ModuloAxis" Id="{eb42ac6b-4ba5-4589-8a29-bb7b971966a8}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ModuloAxis
VAR_INPUT
	///=============GROUP ADMINISTRATIVE==============
	bPowerEnable: 		BOOL;
	fPowerOverride: 	LREAL := 100;
	bReset:				BOOL;
	
	///=============GROUP MOVE==============
	bMoveModExec: 		BOOL;
	fMoveModPos: 		LREAL;
	fMoveModVelo: 		LREAL;
	bStop:			 	BOOL;
	bHalt:				BOOL;
END_VAR
VAR_OUTPUT
	///=============GROUP ADMINISTRATIVE==============
	bPowerStatus: 		BOOL;
	bResetDone: 		BOOL;
	
	///=============GROUP MOVE==============
	bMoveModDone: 		BOOL;
	bMoveModBusy: 		BOOL;
	bMoveModErr: 		BOOL;
	

	///=============GROUP STATUS==============    
	bAxError: 			BOOL;
	nAxErrId: 			DWORD;
	fActVelo: 			LREAL;
	fActPos: 			LREAL;
	
END_VAR
VAR
	
	
	// Baustein Reglerfreigabe
	fbMcPower:	MC_Power;
	
	StfbMcPowerOut: ST_McOutputs;
	
	// Baustein Reset
	
	fbMCReset:	MC_Reset;
	StfbMcResetOut: ST_McOutputs;

	(*===========================*)
	(*Instanz von MC_Move Modulo*)
	fbMoveModulo: MC_MoveModulo;
	StfbMcMoveModulo: ST_McOutputs;

	(* MC_Stop *)
	fbMcStop : MC_Stop;
	st_fbMcStopOut: ST_McOutputs;
	
	(* MC_Halt *)
	fbMcHalt : MC_Halt;
	st_fbMcHaltOut: ST_McOutputs;
	//nstate: INT;
	//fb_RTrig1: R_TRIG;
	MC_ReadActualPosition: MC_ReadActualPosition;

END_VAR
VAR_IN_OUT
	stAxis: AXIS_REF;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*============NICHT VERGESSEN: =============*)
(* ACTION ReadStatus aktualisiert Status Struktur in Axis_REF *)
stAxis.ReadStatus();
(*Zyklische Abfrage von Achszuständen*)

bMoveModDone := StfbMcMoveModulo.Done;
bMoveModBusy :=  StfbMcMoveModulo.Busy;
bMoveModErr := StfbMcMoveModulo.Error;


bAxError :=	stAxis.Status.Error;
nAxErrId :=	stAxis.Status.ErrorID;

fActVelo :=	stAxis.NcToPlc.ActVelo;
fActPos  :=	stAxis.NcToPlc.ActPos;

(*============TO DO MC Power===============================*)
fbMcPower(
	Axis			:= stAxis, 
	Enable			:= bPowerEnable, 
	Enable_Positive	:= bPowerEnable, 
	Enable_Negative	:= bPowerEnable, 
	Override		:= fPowerOverride, 
	BufferMode		:= , 
	Options			:= , 
	Status			=> StfbMcPowerOut.Done, 
	Busy			=> StfbMcPowerOut.Busy, 
	Active			=> StfbMcPowerOut.Active, 
	Error			=> StfbMcPowerOut.Error, 
	ErrorID			=> StfbMcPowerOut.ErrorID);	

(*FB Output*)

bPowerStatus:= fbMcPower.Status;


(* Achse reset: :*)
(*	quittieren eines Achsfehlers
	Schleppabstand auf 0
	Auftrag abbrechen
*)
	
fbMCReset(
	Axis	:= stAxis, 
	Execute	:= bReset, 
	Done	=> StfbMcResetOut.Done, 
	Busy	=> StfbMcResetOut.Busy, 
	Error	=> StfbMcResetOut.Error, 
	ErrorID	=> StfbMcResetOut.ErrorID);

bResetDone := fbMCReset.Done;
(*===========Motion: Achsstarts================================*)

//Einzelfahrbefehl
fbMoveModulo(
	Axis			:= stAxis, 
	Execute			:= bMoveModExec, 
	Position		:= fMoveModPos, 
	Velocity		:= fMoveModVelo, 
	Acceleration	:= 0, // 0 heisst default aus SystemManager "Dynamik" 
	Deceleration	:= 0, 
	Jerk			:= 0, 
	Direction 		:= MC_Shortest_Way,
	BufferMode		:= MC_Buffered, 
	Options			:= , 
	Done			=> StfbMcMoveModulo.Done, 
	Busy			=> StfbMcMoveModulo.Busy, 
	Active			=> StfbMcMoveModulo.Active, 
	CommandAborted	=> StfbMcMoveModulo.CommandAborted, 
	Error			=> StfbMcMoveModulo.Error, 
	ErrorID			=> StfbMcMoveModulo.ErrorID);
	
(* Achse STOP
Besonderheit: Nach Stop ist die Achse solange gesperrt bis Execute 0 ist
Ist das nicht gewünscht kann MC:HALT genutzt werden. Dieser ist nur Flankengesteuert
*)
	
fbMcStop(
	Axis			:= stAxis, 
	Execute			:= bStop, 
	Deceleration	:= 0, 
	Jerk			:= 0, 
	Options			:= , 
	Done			=> st_fbMcStopOut.Done, 
	Busy			=> st_fbMcStopOut.Busy, 
	Active			=> st_fbMcStopOut.Active, 
	CommandAborted	=> st_fbMcStopOut.CommandAborted, 
	Error			=> st_fbMcStopOut.Error, 
	ErrorID			=> st_fbMcStopOut.ErrorID );

fbMcHalt(
	Axis			:= stAxis, 
	Execute			:= bHalt, 
	Deceleration	:= 0, 
	Jerk			:= 0,
	BufferMode 		:= MC_Aborting);]]></ST>
    </Implementation>
    <LineIds Name="FB_ModuloAxis">
      <LineId Id="91" Count="3" />
      <LineId Id="243" Count="2" />
      <LineId Id="248" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="95" Count="39" />
      <LineId Id="242" Count="0" />
      <LineId Id="135" Count="11" />
      <LineId Id="317" Count="0" />
      <LineId Id="147" Count="26" />
      <LineId Id="321" Count="4" />
      <LineId Id="174" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>