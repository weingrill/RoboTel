<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="CO_ABERRATION" Id="{78e5ea52-4364-45d1-8d65-73fef4dd6397}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CO_ABERRATION
VAR_INPUT
	jd, 				// Julian Date
	ra, dec: LREAL; 	//ra and dec in degrees
	eps : LREAL := 0.0;
END_VAR
VAR_OUTPUT
	d_ra, d_dec: LREAL;
END_VAR
VAR
	sunpos: FB_SUNPOS;
	nutate: FB_NUTATE;
	sunra, sundec, sunlon,
	d_psi, d_epsilon, eps0,
	t, e, peri, cd, sd, ce, te, cp, sp, cs, ss, ca, sa, term1, term2, term3, term4: LREAL;
END_VAR
VAR CONSTANT
	d2r : LREAL := PI/180.0;
	k: LREAL := 20.49552; //constant of aberration, in arcseconds
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
;+
;  NAME:
;     CO_ABERRATION
; PURPOSE:
;     Calculate changes to Ra and Dec due to the effect of annual aberration 
; EXPLANATION:
;      as described in Meeus, Chap 23.
; CALLING SEQUENCE:
;      co_aberration, jd, ra, dec, d_ra, d_dec, [EPS = ]
; INPUTS
;       jd      : Julian Date [scalar or vector]
;       ra, dec : Arrays (or scalars) of the ra  and dec's in degrees
;   Note: if jd is a vector, then ra and dec must either be scalars, or 
;                vectors of the same length.
;
; OUTPUTS
;       d_ra, d_dec: the corrections to ra and dec due to aberration in 
;                    arcseconds.  (These values can be added to the true RA 
;                    and dec to get the apparent position).   Note that d_ra
;                     is *not* multiplied by cos(dec), so that 
;                     apparent_ra = ra + d_ra/3600. 
; OPTIONAL INPUT KEYWORD:
;       eps : set this to the true obliquity of the ecliptic (in radians), or
;         it will be set for you if you don't know it (in that case, set it to
;                 an empty variable).
; EXAMPLE:
;   Compute the change in RA and Dec of Theta Persei (RA = 2h46m,11.331s, Dec =
;   49d20',54.54") due to aberration on 2028 Nov 13.19 TD
;
;      IDL> jdcnv,2028,11,13,.19*24,jd      ;Get Julian date
;      IDL> co_aberration,jd,ten(2,46,11.331)*15,ten(49,20,54.54),d_ra,d_dec
;
;      ==> d_ra = 30.045" (=2.003s)    d_dec = 6.697"
; NOTES:
;  These formula are from Meeus, Chapters 23.  Accuracy is much better than 1 
;   arcsecond.
;
;   The maximum deviation due to annual aberration is 20.49" and occurs when the
;   Earth velocity is perpendicular to the direction of the star.
;
; REVISION HISTORY:
;   Written, June 2002,      Chris O'Dell, U. of Wisconsin
;   Fix error with vector input   W. Landsman   June 2009
;   June 2009 update fixed case where JD was scalar but RA,Dec were vectors, but 
;     broke the case when both JD and RA,Dec were vectors Aug 2012 W. Landsman
;   Further fix when JD is 1 element vector  W. Landsman
;-
*)

T := (jd -2451545.0)/36525.0; // julian centuries from J2000 of jd.

IF EPS = 0.0 THEN
	// must calculate obliquity of ecliptic
	nutate(jd := jd, nut_long => d_psi, nut_obliq => d_epsilon); //d_psi and d_epsilon in degrees
	eps0 := ten(23,26,21.448)*3600.0 - 46.8150*T - 0.00059*EXPT(T, 2) +  0.001813*EXPT(T, 3);
	// TRUE obliquity OF the ecliptic in radians
	eps := (eps0 + d_epsilon)/3600.0*d2r; 	
END_IF

sunpos( JD := jd, RA => sunra, Dec => sundec, longmed => sunlon);

// Earth's orbital eccentricity
e := 0.016708634 - 0.000042037*T - 0.0000001267*EXPT(T, 2);
// longitude of perihelion, in degrees 
peri := 102.93735 + 1.71946*T + 0.00046*EXPT(T, 2);

//Useful Trig Functions
cd := COS(dec*d2r);		sd := SIN(dec*d2r);
ce := COS(eps); 		te := TAN(eps);
cp := COS(peri*d2r);	sp := SIN(peri*d2r);
cs := COS(sunlon*d2r);	ss := SIN(sunlon*d2r);
ca := COS(ra*d2r);		sa := SIN(ra*d2r);

term1 := (ca*cs*ce + sa*ss)/cd;
term2 := (ca*cp*ce + sa*sp)/cd;
term3 := (cs*ce*(te*cd - sa*sd) + ca*sd*ss);
term4 := (cp*ce*(te*cd - sa*sd) + ca*sd*sp);

d_ra := -k * term1 + e*k * term2;
d_dec := -k * term3 + e*k * term4;
]]></ST>
    </Implementation>
    <LineIds Name="CO_ABERRATION">
      <LineId Id="3" Count="80" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>