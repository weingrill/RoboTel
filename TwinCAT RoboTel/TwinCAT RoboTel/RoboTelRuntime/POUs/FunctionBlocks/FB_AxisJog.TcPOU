<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="FB_AxisJog" Id="{fb989a3e-caa4-4410-9164-68fdd76c828e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AxisJog
VAR_INPUT
	///=============GROUP ADMINISTRATIVE==============
	bPowerEnable: 		BOOL;
	bEnable_Positive:	BOOL := TRUE;
	bEnable_Negative:	BOOL := TRUE;
	fPowerOverride: 	LREAL := 100;
	bReset:				BOOL;
	bStop:				BOOL := FALSE;
	bForward: BOOL;
	bBackward: BOOL;
END_VAR
VAR_OUTPUT
	bBusy: BOOL;
	bErr: BOOL;
	nErrorID: UDINT;
	
	///=============GROUP STATUS==============    
	bAxError: 			BOOL;
	nAxErrId: 			DWORD;
	fActVelo: 			LREAL;
	fActPos: 			LREAL;
	
END_VAR
VAR
	// Baustein Reglerfreigabe
	fbMcPower:	MC_Power;
	StfbMcPowerOut: ST_McOutputs;
	
	// Baustein Reset
	fbMCReset:	MC_Reset;
	StfbMcResetOut: ST_McOutputs;

	AxMcJog: MC_Jog;
	AxMcJogOut: ST_McOutputs;

	(* MC_Stop *)
	fbMcStop : MC_Stop;
	st_fbMcStopOut: ST_McOutputs;
	
//	StartTrig: R_TRIG;
	nstate: INT;
	nLaststate: INT;

END_VAR
VAR_IN_OUT
	stAxis: AXIS_REF;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* ACTION ReadStatus aktualisiert Status Struktur in Axis_REF *)
stAxis.ReadStatus();
(*Zyklische Abfrage von Achszuständen*)

bAxError :=	stAxis.Status.Error;
nAxErrId :=	stAxis.Status.ErrorID;

fActVelo :=	stAxis.NcToPlc.ActVelo;
fActPos  :=	stAxis.NcToPlc.ActPos;

fbMcPower(
	Axis			:= stAxis, 
	Enable			:= bPowerEnable, 
	Enable_Positive	:= bEnable_Positive, 
	Enable_Negative	:= bEnable_Negative, 
	Override		:= fPowerOverride, 
	BufferMode		:= , 
	Options			:= , 
	Status			=> StfbMcPowerOut.Done, 
	Busy			=> StfbMcPowerOut.Busy, 
	Active			=> StfbMcPowerOut.Active, 
	Error			=> StfbMcPowerOut.Error, 
	ErrorID			=> StfbMcPowerOut.ErrorID);	

fbMCReset(
	Axis	:= stAxis, 
	Execute	:= bReset, 
	Done	=> StfbMcResetOut.Done, 
	Busy	=> StfbMcResetOut.Busy, 
	Error	=> StfbMcResetOut.Error, 
	ErrorID	=> StfbMcResetOut.ErrorID);

AxMcJog(
	JogForward := bForward,
	JogBackwards := bBackward,
	Mode := MC_JOGMODE_STANDARD_FAST,
	Position := fActPos,
	Velocity := fActVelo,
	Acceleration := 5,
	Deceleration := 100,
	Jerk := 0,
	Done			=> AxMcJogOut.Done, 
	Busy			=> AxMcJogOut.Busy, 
	Active			=> AxMcJogOut.Active, 
	CommandAborted	=> AxMcJogOut.CommandAborted, 
	Error			=> AxMcJogOut.Error, 
	ErrorID			=> AxMcJogOut.ErrorID, 
 	Axis := stAxis);

bBusy := AxMcJogOut.Busy;
bErr := AxMcJogOut.Error;
nErrorID := AxMcJogOut.ErrorID;
	
fbMcStop(
	Axis			:= stAxis, 
	Execute			:= bStop, 
	Deceleration	:= 0, 
	Jerk			:= 0, 
	Options			:= , 
	Done			=> st_fbMcStopOut.Done, 
	Busy			=> st_fbMcStopOut.Busy, 
	Active			=> st_fbMcStopOut.Active, 
	CommandAborted	=> st_fbMcStopOut.CommandAborted, 
	Error			=> st_fbMcStopOut.Error, 
	ErrorID			=> st_fbMcStopOut.ErrorID );
]]></ST>
    </Implementation>
    <LineIds Name="FB_AxisJog">
      <LineId Id="3" Count="9" />
      <LineId Id="14" Count="37" />
      <LineId Id="114" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="115" Count="0" />
      <LineId Id="53" Count="11" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>