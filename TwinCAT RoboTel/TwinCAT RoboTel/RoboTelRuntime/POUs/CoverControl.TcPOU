<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="CoverControl" Id="{c323d474-9f57-40fd-ba67-b4ebd08c9f7c}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM CoverControl
VAR_INPUT
	// enables all cover drivers
	enable:		BOOL;
	// resets all drives after an error has occured
	reset:		BOOL;
	// open the cover in proper order
	open:		BOOL;
	// close the cover in proper order
	close:		BOOL;
	// manually enable Cover1
	Cover1_enable:	BOOL;
	// manually open Cover1
	Cover1_open:	BOOL;
	// manually close Cover1
	Cover1_close:	BOOL;
	// manually enable Cover2
	Cover2_enable:	BOOL;
	// manually open Cover2
	Cover2_open:	BOOL;
	// manually close Cover2
	Cover2_close:	BOOL;
	// manually enable Cover3
	Cover3_enable:	BOOL;
	// manually open Cover3
	Cover3_open:	BOOL;
	// manually close Cover1
	Cover3_Close:	BOOL;

END_VAR
VAR_OUTPUT
	// is TRUE, if all covers are open
	isopen:			BOOL;
	// is TRUE, if all covers are closed
	isclosed:		BOOL;
	// is TRUE if any cover-driver reports an error
	Error: 	BOOL;
	// warning state of the DC drives
	Warning: BOOL;
	// cover1 is open
	Cover1_opened, 
	// cover1 is closed
	Cover1_closed:	BOOL;
	// cover2 is open
	Cover2_opened, 
	// cover2 is closed
	Cover2_closed:	BOOL;
	// cover3 is open
	Cover3_opened, 
	// cover3 is closed
	Cover3_closed:	BOOL;
END_VAR
VAR
	// delay timer for opening cover2
	open2_delay: 	TON;
	// dely timer for closing cover3
	close3_delay : 	TON;
	// axis control for cover3
	Cover3_control:	FB_DCAxis_1;
	// axis control for cover2
	Cover2_control:	FB_DCAxis;
	// axis control for cover1
	Cover1_control:	FB_DCAxis;
	
	//Cover3_state: 	RS;
	//triggers for timeout event for cover1
	Cover1_timeout,
	Cover2_timeout,
	Cover3_timeout:	TON;
	//error event for cover1
	Cover1_Event,
	Cover2_Event,
	Cover3_Event:	FB_EventLog;
	// timeout event for cover1
	Cover1_Timeout_Event,
	Cover2_Timeout_Event,
	Cover3_Timeout_Event:	FB_EventLog;
	// log if covers are open
	Covers_opened_event,
	// log if covers are closed
	Covers_closed_event:	FB_EventLog;
	// Event log for a generic drive error
	Covers_Error_event:		FB_EventLog;
	// Event log for a generic drive warning
	Covers_Warning_event:		FB_EventLog;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
This is the control for the two (three) telescope covers. 
The correct order for opening is 1->3->2 and for closing 2->3->1.
GVL Open and close signals are inverted
*)

// close has precedence over open
IF close THEN
	open := FALSE;
END_IF

Cover1_opened := NOT GVL_Telescope.cover1_open;
Cover2_opened := NOT GVL_Telescope.cover2_open;
Cover3_opened := NOT GVL_Telescope.cover3_open;
Cover1_closed := NOT GVL_Telescope.cover1_closed;
Cover2_closed := NOT GVL_Telescope.cover2_closed;
Cover3_closed := NOT GVL_Telescope.cover3_closed;

// wait for cover2 until cover3 has left the closed state
open2_delay(IN := open AND NOT cover3_closed,
			PT := T#300MS);
// wait for cover3 until cover2 has left the open state
close3_delay(IN := close AND NOT cover2_opened,
			PT := T#1500MS);
		
IF Pendantcontrol.manual THEN
	// Covers are enabled individually;
	enable := FALSE;
	Cover1_control.open :=	Cover1_open;
	Cover1_control.close :=	Cover1_close;
	Cover2_control.open :=	Cover2_open;
	Cover2_control.close :=	Cover2_close;
	Cover3_control.open :=	Cover3_open;
	Cover3_control.close :=	Cover3_close;
ELSE
	//TODO: verify Cover1 operations
	Cover1_control.open := open;
	// open cover 3 first then cover 2 after 3 seconds
	Cover3_control.open := open;
	Cover2_control.open := open2_delay.Q;
	
	// close cover 2 first then cover 3 after 3 seconds
	Cover2_control.close := close;
	Cover3_control.close := close3_delay.Q;
	// close cover 1 if cover 3 is closed;
	Cover1_control.close :=	GVL_Telescope.cover3_closed;
END_IF

IF reset THEN
	enable := FALSE;
	Cover1_enable := FALSE;
	Cover2_enable := FALSE;
	Cover3_enable := FALSE;
END_IF

Cover1_control(
	enable := 		enable OR Cover1_enable,
	reset := 		reset,
	limit_open := 	GVL_Telescope.cover1_open,
	limit_close := 	GVL_Telescope.cover1_closed,
	axis_ref := 	GVL_Telescope.Cover1_axis);
// Cover 2 can only be moved in manual operation if cover 3 is not closed to protect the lid.
Cover2_control(
	enable := 		enable OR (Cover2_enable AND NOT cover3_closed),
	reset := 		reset,
	limit_open := 	GVL_Telescope.cover2_open,
	limit_close := 	GVL_Telescope.cover2_closed,
	axis_ref := 	GVL_Telescope.Cover2_axis);
Cover3_control(
	enable := 		enable OR Cover3_enable,
	reset := 		reset,
	limit_open := 	GVL_Telescope.cover3_open,
	limit_close := 	GVL_Telescope.cover3_closed,
	axis_ref := 	GVL_Telescope.Cover3_axis);

// we are open, if all covers are open
isopen := cover3_opened AND cover2_opened AND (cover1_opened OR GVL_Main.isRoboTel);
// we are closed, if all covers are closed
isclosed := cover2_closed AND cover3_closed AND (cover1_closed OR GVL_Main.isRoboTel);
// error indicates an axis error on any axis
Error := (Cover1_control.error AND NOT GVL_Main.isRoboTel) OR Cover2_control.error OR Cover3_control.error;
Warning := Cover1_control.Warning OR Cover2_control.Warning OR Cover3_control.Warning;


// A timeout occurs, when we open the cover, and the opened signal does not activate within n seconds.
// The same holds for closing the cover. This should not take longer then 10 seconds
Cover1_timeout(IN := NOT (Cover1_opened XOR Cover1_closed), PT := T#20S);

Cover2_timeout(IN := NOT (Cover2_opened XOR Cover2_closed), PT := T#20S);
				
Cover3_timeout(IN := NOT (Cover3_opened XOR Cover3_closed), PT := T#20S);

Covers_Error_Event.OnMessage := 'Cover drive error';
IF Error THEN
	IF Cover3_control.error THEN 
		Covers_Error_Event.OnMessage := 'Cover 3 has a drive error.';
	END_IF
	IF Cover2_control.error THEN 
		Covers_Error_Event.OnMessage := 'Cover 2 has a drive error.';
	END_IF
	IF Cover1_control.error THEN 
		Covers_Error_Event.OnMessage := 'Cover 1 has a drive error.';
	END_IF
END_IF

Covers_Error_event(	Trigger := Error, 
					Level := ADSLOG_MSGTYPE_ERROR);

Covers_Warning_event(	Trigger := Warning, 
						Level := ADSLOG_MSGTYPE_WARN, 
						FormatString := '%s', 
						OnMessage := 'A cover drive has a warning.');

// raise an error, if both opened and closed signals are activated
// handle RoboTel differently
Cover1_Event(	Trigger := cover1_open AND cover1_closed AND NOT GVL_Main.isRoboTel,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover1: limit switch error');

Cover2_Event(Trigger := cover2_opened AND cover2_closed,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover2: limit switch error');

Cover3_Event(Trigger := cover3_opened AND cover3_closed,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover3: limit switch error');

//trigger an event, if we encounter a timeout
// handle RoboTel differently

Cover1_Timeout_Event(Trigger := Cover1_timeout.Q AND NOT GVL_Main.isRoboTel,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover1: Timeout');

Cover2_Timeout_Event(Trigger := Cover2_timeout.Q,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover2: Timeout');

Cover3_Timeout_Event(Trigger := Cover3_timeout.Q,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover3: Timeout');
// Log if we are opened
Covers_opened_event(Trigger := isopen,
					Level := ADSLOG_MSGTYPE_WARN,
					OnMessage := 'All covers are open');
//log if we are closed
Covers_closed_event(Trigger := isclosed,
					Level := ADSLOG_MSGTYPE_HINT,
					OnMessage := 'All covers are closed');
				]]></ST>
    </Implementation>
    <LineIds Name="CoverControl">
      <LineId Id="146" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="261" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="269" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="271" Count="1" />
      <LineId Id="270" Count="0" />
      <LineId Id="274" Count="2" />
      <LineId Id="273" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="259" Count="1" />
      <LineId Id="207" Count="1" />
      <LineId Id="205" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="444" Count="2" />
      <LineId Id="440" Count="1" />
      <LineId Id="160" Count="0" />
      <LineId Id="163" Count="4" />
      <LineId Id="209" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="171" Count="5" />
      <LineId Id="179" Count="4" />
      <LineId Id="159" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="628" Count="0" />
      <LineId Id="627" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="623" Count="0" />
      <LineId Id="620" Count="0" />
      <LineId Id="624" Count="0" />
      <LineId Id="632" Count="0" />
      <LineId Id="634" Count="0" />
      <LineId Id="633" Count="0" />
      <LineId Id="635" Count="5" />
      <LineId Id="630" Count="0" />
      <LineId Id="643" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="644" Count="4" />
      <LineId Id="356" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="340" Count="1" />
      <LineId Id="382" Count="1" />
      <LineId Id="345" Count="1" />
      <LineId Id="384" Count="1" />
      <LineId Id="375" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="386" Count="1" />
      <LineId Id="367" Count="1" />
      <LineId Id="388" Count="1" />
      <LineId Id="370" Count="1" />
      <LineId Id="390" Count="1" />
      <LineId Id="426" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="427" Count="1" />
      <LineId Id="431" Count="3" />
      <LineId Id="430" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>