<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CoverControl" Id="{c323d474-9f57-40fd-ba67-b4ebd08c9f7c}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM CoverControl
VAR_INPUT
	// enables all cover drivers
	enable:		BOOL;
	// resets all drives after an error has occured
	reset:		BOOL;
	// open the cover in proper order
	open:		BOOL;
	// close the cover in proper order
	close:		BOOL;
	// actual active cover in manual mode, 0 for automatic = all covers active
	active_cover:	INT;

END_VAR
VAR_OUTPUT
	// is TRUE, if all covers are open
	isopen:			BOOL;
	// is TRUE, if all covers are closed
	isclosed:		BOOL;
	// is TRUE if any cover-driver reports an error
	Error: 	BOOL;
	// warning state of the DC drives
	Warning: BOOL;
	// cover2 is open
	Cover2_opened, 
	// cover2 is closed
	Cover2_closed:	BOOL;
	// cover3 is open
	Cover3_opened, 
	// cover3 is closed
	Cover3_closed:	BOOL;
	Cover2_error: BOOL;
	Cover3_error: BOOL;
	Ready:		BOOL;
END_VAR
VAR
	// delay timer for opening cover2
	open2_delay: 	TON;
	// dely timer for closing cover3
	close3_delay : 	TON;
	
	//Cover3_state: 	RS;
	//triggers for timeout event for cover1
	Cover2_timeout,
	Cover3_timeout:	TON;
	error_trigger: SR;
	//error event for cover
	Cover2_Event,
	Cover3_Event:	FB_EventLog;
	// timeout event for cover1
	Cover2_Timeout_Event,
	Cover3_Timeout_Event:	FB_EventLog;
	// log if covers are open
	Covers_opened_event,
	// log if covers are closed
	Covers_closed_event:	FB_EventLog;
	// Event log for a generic drive error
	Covers_Error_event:		FB_EventLog;
	// Event log for a generic drive warning
	Covers_Warning_event:		FB_EventLog;
	// status word for MQTT message
	Cover_status:		WORD;
	// last status word to trigger MQTT message if different
	LastStatus:			WORD;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
This is the control for the two (three) telescope covers. 
The correct order for opening is 1->3->2 and for closing 2->3->1.
GVL Open and close signals are inverted
*)

// close has precedence over open
IF close THEN
	open := FALSE;
END_IF

IF Error THEN
	open := FALSE;
	close := FALSE;
END_IF

Cover2_opened := NOT GVL_Telescope.cover2_open;
Cover3_opened := NOT GVL_Telescope.cover3_open;
Cover2_closed := NOT GVL_Telescope.cover2_closed;
Cover3_closed := NOT GVL_Telescope.cover3_closed;

IF active_cover = 2 THEN
	GVL_Telescope.open_cover2 := enable AND open AND NOT Cover2_opened;
	GVL_Telescope.close_cover2 := enable AND close AND NOT Cover2_closed;
ELSIF active_cover = 3 THEN
	GVL_Telescope.open_cover3 := enable AND open AND NOT Cover3_opened;
	GVL_Telescope.close_cover3 := enable AND close AND NOT Cover3_closed;
ELSE
	// we open both covers
	// wait for cover2 until cover3 has left the closed state
	open2_delay(IN := enable AND open AND NOT cover3_closed,
				PT := T#300MS);
	// wait for cover3 until cover2 has left the open state
	close3_delay(IN := enable AND close AND NOT cover2_opened,
				PT := T#1500MS);
	GVL_Telescope.open_cover2 := enable AND open AND open2_delay.Q AND NOT Cover2_opened;
	GVL_Telescope.open_cover3 := enable AND open AND NOT Cover3_opened;
	
	GVL_Telescope.close_cover2 := enable AND close AND NOT Cover2_closed;
	GVL_Telescope.close_cover3 := enable AND close AND close3_delay.Q AND NOT Cover3_closed;
END_IF

Cover2_error := Cover2_opened AND Cover2_closed;
Cover3_error := Cover3_opened AND Cover3_closed;
// we are open, if all covers are open
isopen := cover3_opened AND cover2_opened;
// we are closed, if all covers are closed
isclosed := cover2_closed AND cover3_closed;
// error indicates an axis error on any axis
Cover2_timeout(IN := (open AND NOT Cover2_opened) OR (close AND NOT Cover2_closed), PT := T#30S);
Cover3_timeout(IN := (open AND NOT Cover3_opened) OR (close AND NOT Cover3_closed), PT := T#30S);

error_trigger(	SET1 := Cover2_error OR Cover2_timeout.Q OR Cover3_error OR Cover3_timeout.Q,
				RESET := reset,
				Q1 => Error);

Ready := NOT Error;

IF isopen THEN
	open := FALSE;
END_IF
IF isclosed THEN
	close := FALSE;
END_IF

Cover_status.0 := isopen;
Cover_status.1 := isclosed;
Cover_status.2 := Warning;
Cover_status.3 := Error;
Cover_status.4 := isopen;
Cover_status.5 := FALSE;
Cover_status.6 := Cover2_opened;
Cover_status.7 := Cover3_opened;
Cover_status.8 := FALSE;
Cover_status.9 := Cover2_closed;
Cover_status.10 := Cover3_closed;
Cover_status.11 := FALSE;
Cover_status.12 := Cover2_error;
Cover_status.13 := Cover3_error;

IF Cover_status <> LastStatus THEN
	LastStatus := Cover_status;
	MAIN.MQTTClient.Publish('telescope', 'cover', 'CoverIsOpen', BOOL_TO_STRING(isopen));
	MAIN.MQTTClient.Publish('telescope', 'cover', 'CoverIsClosed', BOOL_TO_STRING(isclosed));
	MAIN.MQTTClient.Publish('telescope', 'cover', 'CoverWarning', BOOL_TO_STRING(Warning));
	MAIN.MQTTClient.Publish('telescope', 'cover', 'CoverError', BOOL_TO_STRING(Error));
	MAIN.MQTTClient.Publish('telescope', 'cover', 'CoverStatus', WORD_TO_STRING(Cover_status));
END_IF

// A timeout occurs, when we open the cover, and the opened signal does not activate within n seconds.
// The same holds for closing the cover. This should not take longer then 10 seconds
Cover2_timeout(IN := NOT (Cover2_opened XOR Cover2_closed), PT := T#20S);
				
Cover3_timeout(IN := NOT (Cover3_opened XOR Cover3_closed), PT := T#20S);

Covers_Error_Event.OnMessage := 'Cover drive error';
IF Error THEN
	IF Cover3_error THEN 
		Covers_Error_Event.OnMessage := 'Cover 3 has a drive error.';
	END_IF
	IF Cover2_error THEN 
		Covers_Error_Event.OnMessage := 'Cover 2 has a drive error.';
	END_IF
END_IF


Covers_Error_event(	Trigger := Error, 
					Level := ADSLOG_MSGTYPE_ERROR);

Covers_Warning_event(	Trigger := Warning, 
						Level := ADSLOG_MSGTYPE_WARN);

// raise an error, if both opened and closed signals are activated
// handle RoboTel differently
Cover2_Event(Trigger := cover2_opened AND cover2_closed,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover2: limit switch error');

Cover3_Event(Trigger := cover3_opened AND cover3_closed,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover3: limit switch error');

//trigger an event, if we encounter a timeout
// handle RoboTel differently

Cover2_Timeout_Event(Trigger := Cover2_timeout.Q,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover2: Timeout');

Cover3_Timeout_Event(Trigger := Cover3_timeout.Q,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover3: Timeout');
// Log if we are opened
Covers_opened_event(Trigger := isopen,
					Level := ADSLOG_MSGTYPE_WARN,
					OnMessage := 'All covers are open');
//log if we are closed
Covers_closed_event(Trigger := isclosed,
					Level := ADSLOG_MSGTYPE_HINT,
					OnMessage := 'All covers are closed');
				]]></ST>
    </Implementation>
    <LineIds Name="CoverControl">
      <LineId Id="146" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="261" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="1236" Count="2" />
      <LineId Id="1240" Count="0" />
      <LineId Id="1239" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="271" Count="1" />
      <LineId Id="274" Count="1" />
      <LineId Id="1197" Count="2" />
      <LineId Id="1205" Count="0" />
      <LineId Id="1201" Count="0" />
      <LineId Id="1206" Count="1" />
      <LineId Id="1203" Count="1" />
      <LineId Id="1215" Count="7" />
      <LineId Id="1224" Count="0" />
      <LineId Id="1223" Count="0" />
      <LineId Id="1225" Count="0" />
      <LineId Id="1200" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="1112" Count="0" />
      <LineId Id="1226" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="1233" Count="0" />
      <LineId Id="1235" Count="0" />
      <LineId Id="1234" Count="0" />
      <LineId Id="1230" Count="2" />
      <LineId Id="256" Count="0" />
      <LineId Id="1208" Count="0" />
      <LineId Id="1227" Count="0" />
      <LineId Id="1209" Count="5" />
      <LineId Id="1017" Count="2" />
      <LineId Id="627" Count="0" />
      <LineId Id="1020" Count="1" />
      <LineId Id="1023" Count="6" />
      <LineId Id="1031" Count="1" />
      <LineId Id="1022" Count="0" />
      <LineId Id="1006" Count="5" />
      <LineId Id="1030" Count="0" />
      <LineId Id="1012" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="623" Count="0" />
      <LineId Id="620" Count="0" />
      <LineId Id="624" Count="0" />
      <LineId Id="632" Count="0" />
      <LineId Id="634" Count="0" />
      <LineId Id="633" Count="0" />
      <LineId Id="635" Count="2" />
      <LineId Id="630" Count="0" />
      <LineId Id="914" Count="0" />
      <LineId Id="643" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="644" Count="1" />
      <LineId Id="648" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="382" Count="1" />
      <LineId Id="345" Count="1" />
      <LineId Id="384" Count="1" />
      <LineId Id="375" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="388" Count="1" />
      <LineId Id="370" Count="1" />
      <LineId Id="390" Count="1" />
      <LineId Id="426" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="427" Count="1" />
      <LineId Id="431" Count="3" />
      <LineId Id="430" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>