<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="CoverControl" Id="{c323d474-9f57-40fd-ba67-b4ebd08c9f7c}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM CoverControl
VAR_INPUT
	// enables all cover drivers
	enable:		BOOL;
	// resets all drives after an error has occured
	reset:		BOOL;
	// open the cover in proper order
	open:		BOOL;
	// close the cover in proper order
	close:		BOOL;
	// actual active cover in manual mode, 0 for automatic = all covers active
	active_cover:	INT;

END_VAR
VAR_OUTPUT
	// is TRUE, if all covers are open
	isopen:			BOOL;
	// is TRUE, if all covers are closed
	isclosed:		BOOL;
	// is TRUE if any cover-driver reports an error
	Error: 	BOOL;
	// warning state of the DC drives
	Warning: BOOL;
	// cover1 is open
	Cover1_opened, 
	// cover1 is closed
	Cover1_closed:	BOOL;
	// cover2 is open
	Cover2_opened, 
	// cover2 is closed
	Cover2_closed:	BOOL;
	// cover3 is open
	Cover3_opened, 
	// cover3 is closed
	Cover3_closed:	BOOL;
	Cover1_error: BOOL;
	Cover2_error: BOOL;
	Cover3_error: BOOL;
	Ready:		BOOL;
END_VAR
VAR
	// delay timer for opening cover2
	open2_delay: 	TON;
	// dely timer for closing cover3
	close3_delay : 	TON;
	// axis control for cover3
	Cover3_control:	FB_DCAxis_1;
	// axis control for cover2
	Cover2_control:	FB_DCAxis;
	// axis control for cover1
	Cover1_control:	FB_DCAxis;
	
	//Cover3_state: 	RS;
	//triggers for timeout event for cover1
	Cover1_timeout,
	Cover2_timeout,
	Cover3_timeout:	TON;
	//error event for cover1
	Cover1_Event,
	Cover2_Event,
	Cover3_Event:	FB_EventLog;
	// timeout event for cover1
	Cover1_Timeout_Event,
	Cover2_Timeout_Event,
	Cover3_Timeout_Event:	FB_EventLog;
	// log if covers are open
	Covers_opened_event,
	// log if covers are closed
	Covers_closed_event:	FB_EventLog;
	// Event log for a generic drive error
	Covers_Error_event:		FB_EventLog;
	// Event log for a generic drive warning
	Covers_Warning_event:		FB_EventLog;
	// status word for MQTT message
	Cover_status:		WORD;
	// last status word to trigger MQTT message if different
	LastStatus:			WORD;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
This is the control for the two (three) telescope covers. 
The correct order for opening is 1->3->2 and for closing 2->3->1.
GVL Open and close signals are inverted
*)

// close has precedence over open
IF close THEN
	open := FALSE;
END_IF

Cover1_opened := NOT GVL_Telescope.cover1_open;
Cover2_opened := NOT GVL_Telescope.cover2_open;
Cover3_opened := NOT GVL_Telescope.cover3_open;
Cover1_closed := NOT GVL_Telescope.cover1_closed;
Cover2_closed := NOT GVL_Telescope.cover2_closed;
Cover3_closed := NOT GVL_Telescope.cover3_closed;

// wait for cover2 until cover3 has left the closed state
open2_delay(IN := open AND NOT cover3_closed,
			PT := T#300MS);
// wait for cover3 until cover2 has left the open state
close3_delay(IN := close AND NOT cover2_opened,
			PT := T#1500MS);

(*
Cover1_Control.enable := FALSE;
Cover2_Control.enable := FALSE;
Cover3_Control.enable := FALSE;
Cover1_Control.reset := FALSE;
Cover2_Control.reset := FALSE;
Cover3_Control.reset := FALSE;
Cover1_Control.open := FALSE;
Cover2_Control.open := FALSE;
Cover3_Control.open := FALSE;
Cover1_Control.close := FALSE;
Cover2_Control.close := FALSE;
Cover3_Control.close := FALSE;
*)


CASE active_cover OF
	1:	
		Cover1_Control.enable := enable;
		Cover1_Control.reset := reset;
		Cover1_control.open :=	open;
		Cover1_control.close := close;
		Ready := Cover1_control.Ready;
	2:	
		Cover2_Control.enable := enable;
		Cover2_Control.reset := reset;
		Cover2_control.open :=	open;
		Cover2_control.close :=	close AND NOT cover3_closed;
		Ready := Cover2_control.Ready;
	3:
		Cover3_Control.enable := enable;
		Cover3_Control.reset := reset;
		Cover3_control.open :=	open;
		Cover3_control.close :=	close;
		Ready := Cover3_control.Ready;
ELSE	
	// enable all drives
	Cover1_Control.enable := enable;
	Cover2_Control.enable := enable;
	Cover3_Control.enable := enable;
	Cover1_Control.reset := reset;
	Cover2_Control.reset := reset;
	Cover3_Control.reset := reset;

	//TODO: verify Cover1 operations
	Cover1_control.open := open;
	// open cover 3 first then cover 2 after 3 seconds
	Cover3_control.open := open;
	Cover2_control.open := open2_delay.Q;
	
	// close cover 2 first then cover 3 after 3 seconds
	Cover2_control.close := close;
	Cover3_control.close := close3_delay.Q;
	// close cover 1 if cover 3 is closed;
	Cover1_control.close :=	close AND Cover3_closed AND NOT Cover1_closed;	
	Ready := Cover1_Control.Ready AND Cover2_Control.Ready AND Cover3_Control.Ready;
END_CASE
		

Cover1_control(
	limit_open := 	NOT Cover1_opened,
	limit_close :=  NOT Cover1_closed,
	axis_ref := 	GVL_Telescope.Cover1_axis,
	error => 		Cover1_error);
// Cover 2 can only be moved in manual operation if cover 3 is not closed to protect the lid.
Cover2_control(
	limit_open := 	NOT Cover2_opened,
	limit_close := 	NOT Cover2_closed,
	axis_ref := 	GVL_Telescope.Cover2_axis,
	error => 		Cover2_error);
Cover3_control(
	limit_open := 	NOT Cover3_opened,
	limit_close := 	NOT Cover3_closed,
	axis_ref := 	GVL_Telescope.Cover3_axis,
	error => 		Cover3_error);

// we are open, if all covers are open
isopen := cover3_opened AND cover2_opened AND (cover1_opened OR GVL_Main.isRoboTel);
// we are closed, if all covers are closed
isclosed := cover2_closed AND cover3_closed AND (cover1_closed OR GVL_Main.isRoboTel);
// error indicates an axis error on any axis
Error := (Cover1_error AND NOT GVL_Main.isRoboTel) OR Cover2_error OR Cover3_error;
Warning := Cover1_control.Warning OR Cover2_control.Warning OR Cover3_control.Warning;

Cover_status.0 := isopen;
Cover_status.1 := isclosed;
Cover_status.2 := Warning;
Cover_status.3 := Error;
Cover_status.4 := isopen;
Cover_status.5 := Cover1_opened;
Cover_status.6 := Cover2_opened;
Cover_status.7 := Cover3_opened;
Cover_status.8 := Cover1_closed;
Cover_status.9 := Cover2_closed;
Cover_status.10 := Cover3_closed;
Cover_status.11 := Cover1_error;
Cover_status.12 := Cover2_error;
Cover_status.13 := Cover3_error;

IF Cover_status <> LastStatus THEN
	LastStatus := Cover_status;
	MAIN.MQTTClient.Publish('telescope', 'cover', 'CoverIsOpen', BOOL_TO_STRING(isopen));
	MAIN.MQTTClient.Publish('telescope', 'cover', 'CoverIsClosed', BOOL_TO_STRING(isclosed));
	MAIN.MQTTClient.Publish('telescope', 'cover', 'CoverWarning', BOOL_TO_STRING(Warning));
	MAIN.MQTTClient.Publish('telescope', 'cover', 'CoverError', BOOL_TO_STRING(Error));
	MAIN.MQTTClient.Publish('telescope', 'cover', 'CoverStatus', WORD_TO_STRING(Cover_status));
END_IF

// A timeout occurs, when we open the cover, and the opened signal does not activate within n seconds.
// The same holds for closing the cover. This should not take longer then 10 seconds
Cover1_timeout(IN := NOT (Cover1_opened XOR Cover1_closed), PT := T#20S);

Cover2_timeout(IN := NOT (Cover2_opened XOR Cover2_closed), PT := T#20S);
				
Cover3_timeout(IN := NOT (Cover3_opened XOR Cover3_closed), PT := T#20S);

Covers_Error_Event.OnMessage := 'Cover drive error';
IF Error THEN
	IF Cover3_error THEN 
		Covers_Error_Event.OnMessage := 'Cover 3 has a drive error.';
	END_IF
	IF Cover2_error THEN 
		Covers_Error_Event.OnMessage := 'Cover 2 has a drive error.';
	END_IF
	IF Cover1_error  AND NOT GVL_Main.isRoboTel THEN 
		Covers_Error_Event.OnMessage := 'Cover 1 has a drive error.';
	END_IF
END_IF

IF Warning THEN
	IF Cover3_control.Warning THEN 
		Covers_Warning_event.OnMessage := 'Cover 3 has a drive warning.';
	END_IF
	IF Cover2_control.Warning THEN 
		Covers_Warning_event.OnMessage := 'Cover 2 has a drive warning.';
	END_IF
	IF Cover1_control.Warning AND NOT GVL_Main.isRoboTel THEN 
		Covers_Warning_event.OnMessage := 'Cover 1 has a drive warning.';
	END_IF
END_IF

Covers_Error_event(	Trigger := Error, 
					Level := ADSLOG_MSGTYPE_ERROR);

Covers_Warning_event(	Trigger := Warning, 
						Level := ADSLOG_MSGTYPE_WARN);

// raise an error, if both opened and closed signals are activated
// handle RoboTel differently
Cover1_Event(	Trigger := cover1_opened AND cover1_closed AND NOT GVL_Main.isRoboTel,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover1: limit switch error');

Cover2_Event(Trigger := cover2_opened AND cover2_closed,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover2: limit switch error');

Cover3_Event(Trigger := cover3_opened AND cover3_closed,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover3: limit switch error');

//trigger an event, if we encounter a timeout
// handle RoboTel differently

Cover1_Timeout_Event(Trigger := Cover1_timeout.Q AND NOT GVL_Main.isRoboTel,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover1: Timeout');

Cover2_Timeout_Event(Trigger := Cover2_timeout.Q,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover2: Timeout');

Cover3_Timeout_Event(Trigger := Cover3_timeout.Q,
				Level := ADSLOG_MSGTYPE_ERROR, 
				OnMessage := 'Cover3: Timeout');
// Log if we are opened
Covers_opened_event(Trigger := isopen,
					Level := ADSLOG_MSGTYPE_WARN,
					OnMessage := 'All covers are open');
//log if we are closed
Covers_closed_event(Trigger := isclosed,
					Level := ADSLOG_MSGTYPE_HINT,
					OnMessage := 'All covers are closed');
				]]></ST>
    </Implementation>
    <LineIds Name="CoverControl">
      <LineId Id="146" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="261" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="269" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="271" Count="1" />
      <LineId Id="270" Count="0" />
      <LineId Id="274" Count="2" />
      <LineId Id="273" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="931" Count="0" />
      <LineId Id="877" Count="0" />
      <LineId Id="887" Count="0" />
      <LineId Id="899" Count="0" />
      <LineId Id="889" Count="0" />
      <LineId Id="902" Count="8" />
      <LineId Id="895" Count="1" />
      <LineId Id="832" Count="2" />
      <LineId Id="842" Count="0" />
      <LineId Id="892" Count="0" />
      <LineId Id="881" Count="0" />
      <LineId Id="840" Count="0" />
      <LineId Id="928" Count="0" />
      <LineId Id="836" Count="0" />
      <LineId Id="843" Count="0" />
      <LineId Id="882" Count="0" />
      <LineId Id="893" Count="0" />
      <LineId Id="841" Count="0" />
      <LineId Id="929" Count="0" />
      <LineId Id="837" Count="0" />
      <LineId Id="845" Count="0" />
      <LineId Id="883" Count="0" />
      <LineId Id="894" Count="0" />
      <LineId Id="844" Count="0" />
      <LineId Id="930" Count="0" />
      <LineId Id="846" Count="0" />
      <LineId Id="848" Count="0" />
      <LineId Id="886" Count="0" />
      <LineId Id="884" Count="1" />
      <LineId Id="911" Count="2" />
      <LineId Id="847" Count="0" />
      <LineId Id="849" Count="9" />
      <LineId Id="839" Count="0" />
      <LineId Id="927" Count="0" />
      <LineId Id="835" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="738" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="174" Count="1" />
      <LineId Id="739" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="182" Count="1" />
      <LineId Id="740" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="628" Count="0" />
      <LineId Id="1017" Count="2" />
      <LineId Id="627" Count="0" />
      <LineId Id="1020" Count="1" />
      <LineId Id="1023" Count="6" />
      <LineId Id="1031" Count="1" />
      <LineId Id="1022" Count="0" />
      <LineId Id="1006" Count="5" />
      <LineId Id="1030" Count="0" />
      <LineId Id="1012" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="623" Count="0" />
      <LineId Id="620" Count="0" />
      <LineId Id="624" Count="0" />
      <LineId Id="632" Count="0" />
      <LineId Id="634" Count="0" />
      <LineId Id="633" Count="0" />
      <LineId Id="635" Count="5" />
      <LineId Id="630" Count="0" />
      <LineId Id="914" Count="0" />
      <LineId Id="916" Count="9" />
      <LineId Id="915" Count="0" />
      <LineId Id="643" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="644" Count="1" />
      <LineId Id="648" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="340" Count="1" />
      <LineId Id="382" Count="1" />
      <LineId Id="345" Count="1" />
      <LineId Id="384" Count="1" />
      <LineId Id="375" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="386" Count="1" />
      <LineId Id="367" Count="1" />
      <LineId Id="388" Count="1" />
      <LineId Id="370" Count="1" />
      <LineId Id="390" Count="1" />
      <LineId Id="426" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="427" Count="1" />
      <LineId Id="431" Count="3" />
      <LineId Id="430" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>