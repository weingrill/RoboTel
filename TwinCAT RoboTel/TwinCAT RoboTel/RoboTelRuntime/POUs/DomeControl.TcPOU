<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="DomeControl" Id="{0e02434d-920e-4c0f-81fc-5ff7d5573875}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM DomeControl
VAR_INPUT
	// enable the dome azimuth
	enable:		BOOL;
	// reset the dome axis after an error
	Reset:		BOOL;
	// rotate the dome left (ccw)
	left:		BOOL;
	// rotate the dome right (cw)
	right: 		BOOL;
	// open the dome
	OpenDome:	BOOL;
	// close the dome
	CloseDome:	BOOL; // := TRUE;
	// turn on the light in the dome
	Light: 		BOOL;
	// azimuth position to move to
	position:	LREAL;
	// initiate homing
	HomeAxis:	BOOL;
END_VAR
VAR_OUTPUT
	// error condition on the azimuth drive
	Error:		BOOL;
	// NC axis error of the dome drive
	ErrorID:	UDINT;
	// error in the dome communication or drive
	DomeError:	BOOL;
	// dome is calibrated
	Calibrated:	BOOL;
END_VAR
VAR
	// dome axis function block
	DomeAxis: FB_Axis2;
	// current measured dome azimuth
	Azimuth_current: 	LREAL;
	// dome velocity
	ActVelo:			LREAL;
	//
	//manual_enable:		BOOL;
	// command to move the azimuth to position
	move_azimuth:		BOOL;
	// dome is halted
	//stop_done:			BOOL;
	// dome slit and flap are open
	DomeOpened:			BOOL;
	// dome is closed
	DomeClosed:			BOOL;
	// dome flap (lower section) is open
	FlapOpen:			BOOL;
	// dome flap (lower section) is closed
	FlapClosed:			BOOL;
	//dome slit is open
	SlitOpen:			BOOL;
	// dome slit is closed
	SlitClosed:			BOOL;
	// bit to indicate if domestatus is valid
	DomeValid:			BOOL;
	// dome control word
   	DomeStatusWord:		WORD;
	// last status Word
	LastStatus:			WORD;
	// permanent communication error
	PermanentError:		TON := (IN:=FALSE, PT:=T#30S);
	HomeDelay:			FB_TONTP;
	F_Azimuth_home:		F_TRIG;
	R_Azimuth_home:		R_TRIG;
	// direction invariant azimuth home signal;
	Azimuth_home:		BOOL;
	// time delay for dome light
	LightTimer:			TP;
	// next state
	//:				BYTE := 0;
	// ADS communiaction busy
	bBusy: 				BOOL;
	// ADS communication error
	bError: 			BOOL;
	// ADS communication error id
	nErrID: 			UDINT;
	// cycle timer for the ADS write cycle
	ReadCycle:			TON := (PT:=T#1S);
	
	fbReadReq: ADSREAD := ( NETID := '5.73.45.158.1.1', PORT := 851, TMOUT := DEFAULT_ADS_TIMEOUT );
	DomeCalibration:	MC_SetPosition;
	SyncDome:			BOOL;
	DomeCommEvent:		FB_Eventlog;
	DomeAxisEvent:		FB_Eventlog;
	DomeOpenedEvent:	FB_Eventlog;
	DomeClosedEvent:	FB_Eventlog;
	OpenDomeEvent:		FB_Eventlog;
	CloseDomeEvent:		FB_Eventlog;
	DomeCalibrationEvent: FB_Eventlog;
	MQTTTimer : TON := (PT:=T#10S);
	// MQTT String
	sPayloadPub: STRING(255);
	getlastposition:	BOOL := TRUE;
END_VAR
VAR CONSTANT
	tolerance:				LREAL := 5.0;
	calibration_position:	LREAL := 172.5;
	home_position:			LREAL := 180.0;
END_VAR
VAR PERSISTENT
	last_position:	LREAL := -1.0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* This program is responsible for the dome control. 
The dome is enabled unless the emergency button is pressed.
The two-button manual box steers the dome counter-clockwise or clockwise
If the dome is in automatic mode, homing is performed first.
The first section controls the signals for the inverter.
The second section controls the dome axis.
The third section handles the communications via ADS with the dome PLC.
*)

DomeLowLevelControl(enable := GVL_Safety.Run);
enable := GVL_Safety.Run;

// if we are calibrated or encounter an error while calibrating, deactivate homing
IF DomeAxis.Calibrated OR Error THEN
	HomeAxis := FALSE;
END_IF

IF Error THEN
	move_azimuth := FALSE;
END_IF

IF DomeAxis.Calibrated THEN
	last_position := Azimuth_current;
	getlastposition := FALSE;
END_IF


ActVelo := GVL_Dome.ActVelo;

// limit position to sane value
position := MODABS(position, 360.0);

// if we are calibrated, but azimuth is not, go to home position
HomeDelay(IN := DomeAxis.Calibrated, PT1 := T#5S, PT2 := T#100MS);

IF HomeDelay.Q THEN
	position := home_position;
	move_azimuth := TRUE;
END_IF

SyncDome := DomeAxis.Calibrated AND TelescopeControl.power AND AzimuthElevationControl.calibrated;
// if we are on automatic, tie the dome to the telescope

IF DomeAxis.Calibrated AND TelescopeControl.power AND AzimuthElevationControl.calibrated THEN
	position := MODABS(TelescopeControl.azimuth_current, 360.0);
	move_azimuth := ABS(Azimuth_current - position) > tolerance;
END_IF

Calibrated := DomeAxis.Calibrated;
// when homing, ensure that the position is the calibration position
IF HomeAxis THEN
	position := calibration_position;	
END_IF
F_Azimuth_home(CLK := GVL_Dome.Azimut_home);
R_Azimuth_home(CLK := GVL_Dome.Azimut_home);

Azimuth_home := (R_Azimuth_home.Q AND GVL_Dome.bDirectionPlus) OR 
				(F_Azimuth_home.Q AND GVL_Dome.bDirectionMinus);

// velocity = 2°/s or 180° in 81s, 360° in 120s (was 2.22)
// TODO: Reset does not propagate to the FB and therefor does not reset the error
DomeAxis(
	Enable := 		enable,
	Reset := 		reset,
	MoveAxis := 	move_azimuth,
	HomeAxis :=		HomeAxis,
	Position := 	position,
	Velocity := 	3.0,
	Jog_Forward :=	right OR GVL_Dome.Clockwise,
	Jog_Backwards := left OR GVL_Dome.CounterClockwise,
	bCalibrationCam := GVL_Dome.Azimut_home,
	isModuloAxis := TRUE,
	//StopDone =>		stop_done,
	Error =>		error,
	ErrorID =>		ErrorID,
	ActualPosition => Azimuth_current,
	AxisRef	:= 		GVL_Dome.DomeAxisRef);

IF getlastposition AND last_position>=0.0 AND NOT Calibrated THEN
	DomeCalibration.Execute := getlastposition AND DomeAxis.Ready;
	DomeCalibration.Position := last_position;
ELSE
	DomeCalibration.Execute := Azimuth_home AND HomeDelay.Q AND DomeAxis.Ready;
	DomeCalibration.Position := calibration_position;
END_IF

// re-calibrate the dome, if we pass the reference switch. execute only if enough time has passed since homing.
DomeCalibration(Axis := GVL_Dome.DomeAxisRef);

IF DomeCalibration.Done OR Calibrated THEN
	getlastposition := FALSE;
END_IF

IF DomeAxis.MoveDone THEN
	move_azimuth := FALSE;
END_IF


// Light is switched off after 60 minutes or if Light signal is low
LightTimer(IN := Light, PT := T#60M);
GVL_Dome.Light := Light AND LightTimer.Q;

(* The remote section for moving parts of the dome starts here. *)
GVL_Dome.DomeControlWord.0 := TRUE;
IF CloseDome THEN
	OpenDome := FALSE;
	GVL_Dome.DomeControlWord.1 := FALSE; // CloseFlap
	GVL_Dome.DomeControlWord.2 := FALSE; // CloseSlit
ELSIF OpenDome THEN
	GVL_Dome.DomeControlWord.3 := TRUE; // OpenFlap
	GVL_Dome.DomeControlWord.4 := TRUE; // OpenSlit
END_IF

ReadCycle(IN := TRUE);
IF ReadCycle.Q THEN
	// read if the ADS command is busy
	fbReadReq(	READ := FALSE,
				BUSY => bBusy,
				ERR =>	bError,
				ERRID => nErrID);
	IF NOT bBusy THEN
		// read the variable
		fbReadReq(  IDXGRP := 16#4020, 
					IDXOFFS := 0, 
					LEN := SIZEOF(DomeStatusWord), 
					DESTADDR := ADR(DomeStatusWord),
					READ := TRUE,
					BUSY => bBusy,
					ERR =>	bError,
					ERRID => nErrID);
		// restart the read cycle
		ReadCycle(IN := FALSE);
	ELSE
		// reset the read command
		fbReadReq(READ := FALSE);
	END_IF
	IF NOT bError THEN
		DomeValid  := DomeStatusWord.0;
		DomeOpened := DomeStatusWord.1;
		DomeClosed := DomeStatusWord.2;
		FlapOpen   := DomeStatusWord.3;
		FlapClosed := DomeStatusWord.4;
		SlitOpen   := DomeStatusWord.5;
		SlitClosed := DomeStatusWord.6;
	ELSE
		// reset the status word
		DomeStatusWord := 0;
	END_IF
END_IF

CASE NErrID OF
			6: DomeCommEvent.OnMessage := 'ERR_TARGETPORTNOTFOUND';
			29: DomeCommEvent.OnMessage := 'ERR_AMSSYNC_TIMEOUT';
			1861: DomeCommEvent.OnMessage := 'ADSERR_CLIENT_SYNCTIMEOUT';
ELSE
			DomeCommEvent.OnMessage := UDINT_TO_STRING(nErrID);
END_CASE

PermanentError(IN := NOT DomeValid);
		
DomeError := PermanentError.Q OR Error;

IF DomeOpened THEN
	OpenDome := FALSE;
ELSIF DomeClosed THEN
	CloseDome := FALSE;
END_IF

MQTTTimer(IN:=Enable);
IF MQTTTimer.Q THEN // publish new payload every second
	MQTTTimer(IN:=FALSE);
	sPayloadPub := 'dome,location=dome,host=CX-4E6032 ';
	sPayloadPub := APPEND(sPayloadPub, 'DomeAzimuth=', LREAL_TO_FMTSTR(Azimuth_current, 1, TRUE));
	sPayloadPub := APPEND(sPayloadPub, ',Calibrated=', BOOL_TO_STRING(Calibrated));	
	MQTTCommunication.fbMqttClient.Publish(	
					sTopic:= 'RoboTel/Telemetry', 
					pPayload:= ADR(sPayloadPub), 
					nPayloadSize:= LEN2(ADR(sPayloadPub)),
					eQoS:= TcIotMqttQos.AtMostOnceDelivery,
					bRetain:= FALSE, 
					bQueue:= FALSE );
	// invalidate last status for testing
	LastStatus := 0;
END_IF

IF DomeStatusWord <> LastStatus THEN
	LastStatus := DomeStatusWord;
	sPayloadPub := 'dome,location=dome,host=CX-4E6032,module=DomeControl ';
	sPayloadPub := APPEND(sPayloadPub, 'DomeCommunicationOK=', BOOL_TO_STRING(NOT PermanentError.Q));
	sPayloadPub := APPEND(sPayloadPub, ',DomeClosed=', BOOL_TO_STRING(DomeClosed));
	sPayloadPub := APPEND(sPayloadPub, ',DomeOpened=', BOOL_TO_STRING(DomeOpened));
	sPayloadPub := APPEND(sPayloadPub, ',FlapOpen=', BOOL_TO_STRING(FlapOpen));	
	sPayloadPub := APPEND(sPayloadPub, ',FlapClosed=', BOOL_TO_STRING(FlapClosed));	
	sPayloadPub := APPEND(sPayloadPub, ',SlitOpen=', BOOL_TO_STRING(SlitOpen));	
	sPayloadPub := APPEND(sPayloadPub, ',SlitClosed=', BOOL_TO_STRING(SlitClosed));	
	
	MQTTCommunication.fbMqttClient.Publish(	
					sTopic:= 'RoboTel/Telemetry', 
					pPayload:= ADR(sPayloadPub), 
					nPayloadSize:= LEN2(ADR(sPayloadPub)),
					eQoS:= TcIotMqttQos.AtMostOnceDelivery,
					bRetain:= TRUE, 
					bQueue:= FALSE );
END_IF

DomeCommEvent(	Trigger := PermanentError.Q, 
					Level := ADSLOG_MSGTYPE_ERROR,
					FormatString := 'Dome communication error: %s',
					OffMessage := 'OK',
					OffLevel := ADSLOG_MSGTYPE_HINT);
DomeAxisEvent(	
	Trigger := 		Error, 
	Level := 		ADSLOG_MSGTYPE_ERROR,
	FormatString :=	'Dome axis Error: %s',
	OnMessage := 	NCError_TO_STRING(ErrorID),
	OffMEssage := 	'OK');
				
DomeCalibrationEvent(	
	Trigger := 		GVL_Dome.Azimut_home, 
	Level := 		ADSLOG_MSGTYPE_HINT,
	OnMessage := 	'Dome is (re-)calibrated.');

DomeOpenedEvent(
	Trigger := 		DomeOpened, 
	Level := 		ADSLOG_MSGTYPE_WARN,
	OnMessage := 	'Dome is open.');
	
DomeClosedEvent(
	Trigger := 		DomeClosed, 
	Level := 		ADSLOG_MSGTYPE_HINT,
	OnMessage := 	'Dome is closed.');
	
OpenDomeEvent(
	Trigger := 		DomeOpened, 
	Level := 		ADSLOG_MSGTYPE_WARN,
	OnMessage := 	'Dome is opening.');
	
CloseDomeEvent(
	Trigger := 		DomeClosed, 
	Level := 		ADSLOG_MSGTYPE_HINT,
	OnMessage := 	'Dome is closing.');]]></ST>
    </Implementation>
    <LineIds Name="DomeControl">
      <LineId Id="1008" Count="0" />
      <LineId Id="1223" Count="2" />
      <LineId Id="1011" Count="2" />
      <LineId Id="1010" Count="0" />
      <LineId Id="1009" Count="0" />
      <LineId Id="1425" Count="0" />
      <LineId Id="2356" Count="0" />
      <LineId Id="2354" Count="0" />
      <LineId Id="1216" Count="0" />
      <LineId Id="955" Count="0" />
      <LineId Id="1209" Count="0" />
      <LineId Id="960" Count="0" />
      <LineId Id="2349" Count="3" />
      <LineId Id="2317" Count="0" />
      <LineId Id="2319" Count="1" />
      <LineId Id="2337" Count="0" />
      <LineId Id="2322" Count="0" />
      <LineId Id="2318" Count="0" />
      <LineId Id="1449" Count="1" />
      <LineId Id="1431" Count="0" />
      <LineId Id="1429" Count="0" />
      <LineId Id="1426" Count="0" />
      <LineId Id="1430" Count="0" />
      <LineId Id="1419" Count="0" />
      <LineId Id="1438" Count="0" />
      <LineId Id="1435" Count="0" />
      <LineId Id="1404" Count="0" />
      <LineId Id="1420" Count="0" />
      <LineId Id="1423" Count="0" />
      <LineId Id="1421" Count="0" />
      <LineId Id="2199" Count="0" />
      <LineId Id="1424" Count="0" />
      <LineId Id="1405" Count="0" />
      <LineId Id="1433" Count="0" />
      <LineId Id="1406" Count="2" />
      <LineId Id="1403" Count="0" />
      <LineId Id="1452" Count="0" />
      <LineId Id="1428" Count="0" />
      <LineId Id="1414" Count="1" />
      <LineId Id="1418" Count="0" />
      <LineId Id="1417" Count="0" />
      <LineId Id="1443" Count="0" />
      <LineId Id="1445" Count="1" />
      <LineId Id="1001" Count="0" />
      <LineId Id="1447" Count="0" />
      <LineId Id="1444" Count="0" />
      <LineId Id="1000" Count="0" />
      <LineId Id="871" Count="0" />
      <LineId Id="913" Count="0" />
      <LineId Id="925" Count="0" />
      <LineId Id="914" Count="1" />
      <LineId Id="1413" Count="0" />
      <LineId Id="916" Count="0" />
      <LineId Id="1434" Count="0" />
      <LineId Id="919" Count="1" />
      <LineId Id="950" Count="0" />
      <LineId Id="933" Count="0" />
      <LineId Id="951" Count="0" />
      <LineId Id="921" Count="0" />
      <LineId Id="923" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="2324" Count="0" />
      <LineId Id="941" Count="0" />
      <LineId Id="2327" Count="0" />
      <LineId Id="2340" Count="0" />
      <LineId Id="2342" Count="2" />
      <LineId Id="2326" Count="0" />
      <LineId Id="2333" Count="0" />
      <LineId Id="778" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="2348" Count="0" />
      <LineId Id="2345" Count="2" />
      <LineId Id="779" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="952" Count="1" />
      <LineId Id="771" Count="0" />
      <LineId Id="1005" Count="0" />
      <LineId Id="1004" Count="0" />
      <LineId Id="830" Count="0" />
      <LineId Id="775" Count="0" />
      <LineId Id="931" Count="1" />
      <LineId Id="747" Count="0" />
      <LineId Id="1135" Count="0" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1345" Count="1" />
      <LineId Id="1138" Count="0" />
      <LineId Id="1146" Count="1" />
      <LineId Id="1137" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="755" Count="0" />
      <LineId Id="2001" Count="0" />
      <LineId Id="2067" Count="0" />
      <LineId Id="2049" Count="2" />
      <LineId Id="2004" Count="0" />
      <LineId Id="2013" Count="0" />
      <LineId Id="2068" Count="0" />
      <LineId Id="2041" Count="7" />
      <LineId Id="2069" Count="0" />
      <LineId Id="2014" Count="1" />
      <LineId Id="2070" Count="0" />
      <LineId Id="2016" Count="0" />
      <LineId Id="2021" Count="0" />
      <LineId Id="2052" Count="7" />
      <LineId Id="2063" Count="0" />
      <LineId Id="2065" Count="1" />
      <LineId Id="2062" Count="0" />
      <LineId Id="2022" Count="1" />
      <LineId Id="2035" Count="5" />
      <LineId Id="716" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="1998" Count="0" />
      <LineId Id="1068" Count="0" />
      <LineId Id="999" Count="0" />
      <LineId Id="1935" Count="2" />
      <LineId Id="1939" Count="2" />
      <LineId Id="1522" Count="2" />
      <LineId Id="1982" Count="1" />
      <LineId Id="1986" Count="0" />
      <LineId Id="1979" Count="0" />
      <LineId Id="1989" Count="5" />
      <LineId Id="1988" Count="0" />
      <LineId Id="2313" Count="0" />
      <LineId Id="2312" Count="0" />
      <LineId Id="1978" Count="0" />
      <LineId Id="1980" Count="1" />
      <LineId Id="1984" Count="0" />
      <LineId Id="1622" Count="0" />
      <LineId Id="2310" Count="0" />
      <LineId Id="1625" Count="0" />
      <LineId Id="1995" Count="0" />
      <LineId Id="1705" Count="0" />
      <LineId Id="1946" Count="0" />
      <LineId Id="1953" Count="0" />
      <LineId Id="1956" Count="1" />
      <LineId Id="1628" Count="6" />
      <LineId Id="1077" Count="0" />
      <LineId Id="758" Count="3" />
      <LineId Id="763" Count="0" />
      <LineId Id="757" Count="0" />
      <LineId Id="943" Count="5" />
      <LineId Id="942" Count="0" />
      <LineId Id="1283" Count="3" />
      <LineId Id="1964" Count="0" />
      <LineId Id="1282" Count="0" />
      <LineId Id="1966" Count="3" />
      <LineId Id="1971" Count="3" />
      <LineId Id="1970" Count="0" />
      <LineId Id="2080" Count="7" />
      <LineId Id="2079" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>