<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="DomeControl" Id="{0e02434d-920e-4c0f-81fc-5ff7d5573875}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM DomeControl
VAR_INPUT
	// enable the dome azimuth
	enable:		BOOL;
	// reset the dome axis after an error
	Reset:		BOOL;
	// rotate the dome left (ccw)
	left:		BOOL;
	// rotate the dome right (cw)
	right: 		BOOL;
	// open the dome
	OpenDome:	BOOL;
	// close the dome
	CloseDome:	BOOL := TRUE;
	// turn on the light in the dome
	Light: 		BOOL;
	// azimuth position to move to
	position:	LREAL;
END_VAR
VAR_OUTPUT
	Error:		BOOL;
	ErrorID:	UDINT;
	DomeError:	BOOL;
END_VAR
VAR
	DomeAxis: FB_Axis2;
	Azimuth_current: 	LREAL;
	manual_enable:	BOOL;
	move_azimuth:	BOOL;
	stop_done:		BOOL;
	DomeOpened,
	DomeClosed:			BOOL;
   	DomeControlWord:	WORD;
	DeHumidifierDelay : TON;
	PermanentError:		TON;
	LightTimer:		TP;
	bWrite       : BOOL;(* Rising edge at this variable starts command execution *)
	nState       : BYTE := 0;
	bBusy        : BOOL;
	bError       : BOOL;
	nErrID       : UDINT;
	arrBool       : ARRAY[0..3] OF BOOL;(* Server data to be written *)
	i            : INT;

	WriteCycle:	FB_BLINK;
	
	fbWriteReq: ADSWRITE := ( NETID := '5.73.45.158.1.1', PORT := 851, TMOUT := DEFAULT_ADS_TIMEOUT );
	fbReadReq: ADSREAD := ( NETID := '5.73.45.158.1.1', PORT := 851, TMOUT := DEFAULT_ADS_TIMEOUT );
	DomeCalibration: MC_SetPosition;
	DomeCommEvent:	FB_Eventlog;
	DomeAxisEvent:	FB_Eventlog;
END_VAR
VAR CONSTANT
	tolerance:				LREAL := 3.0;
	calibration_position:	LREAL := 200.0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* This program is responsible for the dome control. 
The dome is enabled unless the emergency button is pressed.
The two-button manual box steers the dome counter-clockwise or clockwise
If the dome is in automatic mode, homing is performed first.
The first section controls the signals for the inverter.
The second section controls the dome axis.
The third section handles the communications via ADS with the dome PLC.
*)

(* source: https://infosys.beckhoff.de/english.php?content=../content/1033/tcplclib_tc2_system/18014399220202635.html&id= *)
GVL_Dome.Inverter_Enable := FALSE;
GVL_Dome.Inverter_Velocity := 0;

enable := GVL_Safety.Run;

IF GVL_Dome.bVeloHigh THEN
	GVL_Dome.Inverter_Velocity := 32000;
	GVL_Dome.Inverter_Enable := TRUE;
END_IF

IF GVL_Dome.bVeloLow THEN
	GVL_Dome.Inverter_Velocity := 16000;
	GVL_Dome.Inverter_Enable := TRUE;
END_IF

IF GVL_Dome.bBreak THEN
	GVL_Dome.Inverter_Velocity := 0;
	GVL_Dome.Inverter_Enable := FALSE;
END_IF

GVL_Dome.Inverter_DirectionMinus := GVL_Dome.bDirectionPlus;

IF DomeAxis.Calibrated THEN
	DomeAxis.HomeAxis := FALSE;
	// if we are on automatic, tie the dome to the telescope
	IF TelescopeControl.power THEN
		position := TelescopeControl.azimuth_current;
		move_azimuth := ABS(Azimuth_current - position) > tolerance;
	END_IF
ELSE
	// perform homing only, when in automatic or manual/pendant mode
	DomeAxis.HomeAxis := TelescopeControl.power;
	position := 200.0;
END_IF

// velocity = 2°/s or 180° in 81s, 360° in 120s (was 2.22)

DomeAxis(
	Enable := 		enable,
	Reset := 		reset,
	MoveAxis := 	move_azimuth,
	Position := 	position,
	Jog_Forward :=	right OR GVL_Dome.Clockwise,
	Jog_Backwards := left OR GVL_Dome.CounterClockwise,
	bCalibrationCam := GVL_Dome.Azimut_home,
	isModuloAxis := TRUE,
	StopDone =>		stop_done,
	Error =>		error,
	ErrorID =>		ErrorID,
	ActualPosition => Azimuth_current,
	AxisRef	:= 		GVL_Dome.DomeAxisRef);

// re-calibrate the dome, if we pass the reference switch
DomeCalibration(Axis := GVL_Dome.DomeAxisRef,
	Execute := GVL_Dome.Azimut_home,
	Position := 200.0); // TODO: Options := ST_SetPositionOptions.ClearPositionLag
		
IF stop_done THEN
	move_azimuth := FALSE;
END_IF

// delay startup of the dehumidifiert to prevent power-spike
// turn off dehumidifier if dome is open
DeHumidifierDelay(IN := NOT OpenDome, PT := T#10S, Q => GVL_Dome.DeHumidifier);

// Light is switched off after 60 minutes or if Light signal is low
LightTimer(IN := Light, PT := T#60M);
GVL_Dome.Light := Light AND LightTimer.Q;

(* The remote section for moving parts of the dome starts here. *)

DomeControlWord.0 := TRUE;
IF CloseDome THEN
	OpenDome := FALSE;
ELSIF OpenDome THEN
	DomeControlWord.1 := TRUE; // OpenFlap
	DomeControlWord.2 := TRUE; // OpenSlit
END_IF

WriteCycle(ENABLE := TRUE, ON_TIME := T#5S, OFF_TIME := T#5S, Q => bWrite);

CASE nState OF
   0:
      IF bWrite THEN
         bWrite := FALSE;
         
         bBusy := TRUE;
         bError := FALSE;
         nErrID := 0;
         
         fbWriteReq( WRITE := FALSE );
         fbWriteReq( IDXGRP := 16#4020, IDXOFFS := 0, 
                  LEN := SIZEOF( DomeControlWord ), SRCADDR := ADR( DomeControlWord ), 
                  WRITE := TRUE );
         nState := 1;            
      END_IF
      
   1:  // remain in this state until bBusy is FALSE
      fbWriteReq( WRITE := FALSE, BUSY=>bBusy, ERR=>bError, ERRID=>nErrID );
      IF NOT bBusy THEN
         IF NOT bError THEN
			nState := 2;	// Success: continue with read cycle
         ELSE
			nState := 100;(* Error *)
         END_IF
      END_IF
	2:
         bBusy := TRUE;
         bError := FALSE;
         nErrID := 0;
         
         fbReadReq( READ := FALSE );
         fbReadReq( IDXGRP := 16#4020, IDXOFFS := 0, 
                  LEN := SIZEOF( DomeControlWord ), DESTADDR := ADR( DomeControlWord ), 
                  READ := TRUE );
         nState := 3;            
	3:
		fbReadReq( READ := FALSE, BUSY=>bBusy, ERR=>bError, ERRID=>nErrID );
		IF NOT bBusy THEN
			IF NOT bError THEN
				DomeOpened := DomeControlWord.3;
				DomeClosed := DomeControlWord.4;
				nState := 0;// Success: wait for write cycle
			ELSE
				DomeControlWord.0 := FALSE;
				nState := 100; // error
			END_IF
		END_IF
		

	100: // error handling: we try again
		nState := 0;
   
END_CASE

CASE NErrID OF
	29: DomeCommEvent.OnMessage := 'ERR_AMSSYNC_TIMEOUT';

	1861: DomeCommEvent.OnMessage := 'ADSERR_CLIENT_SYNCTIMEOUT';
ELSE
	DomeCommEvent.OnMessage := UDINT_TO_STRING(nErrID);
END_CASE

PermanentError(IN := bError, PT := T#30S);

DomeError := PermanentError.Q OR Error;


DomeCommEvent(	Trigger := PermanentError.Q, 
					Level := ADSLOG_MSGTYPE_ERROR,
					FormatString := 'Dome Communication Error: %s',
					OffMessage := 'OK',
					OffLevel := ADSLOG_MSGTYPE_HINT);
DomeAxisEvent(	
	Trigger := 		Error, 
	Level := 		ADSLOG_MSGTYPE_ERROR,
	FormatString :=	'Dome Axis Error: %s',
	OnMessage := 	DWORD_TO_HEXSTR(ErrorID, 4, FALSE),
	OffMEssage := 	'OK');
				]]></ST>
    </Implementation>
    <LineIds Name="DomeControl">
      <LineId Id="1008" Count="0" />
      <LineId Id="1223" Count="2" />
      <LineId Id="1011" Count="2" />
      <LineId Id="1010" Count="0" />
      <LineId Id="1009" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="650" Count="0" />
      <LineId Id="673" Count="0" />
      <LineId Id="1215" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="636" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="639" Count="0" />
      <LineId Id="647" Count="0" />
      <LineId Id="638" Count="0" />
      <LineId Id="668" Count="4" />
      <LineId Id="640" Count="2" />
      <LineId Id="648" Count="0" />
      <LineId Id="643" Count="2" />
      <LineId Id="1216" Count="0" />
      <LineId Id="955" Count="0" />
      <LineId Id="1209" Count="0" />
      <LineId Id="1221" Count="0" />
      <LineId Id="1210" Count="0" />
      <LineId Id="1213" Count="0" />
      <LineId Id="1211" Count="1" />
      <LineId Id="960" Count="0" />
      <LineId Id="1222" Count="0" />
      <LineId Id="1207" Count="1" />
      <LineId Id="957" Count="0" />
      <LineId Id="1001" Count="0" />
      <LineId Id="1000" Count="0" />
      <LineId Id="871" Count="0" />
      <LineId Id="913" Count="0" />
      <LineId Id="925" Count="0" />
      <LineId Id="914" Count="2" />
      <LineId Id="919" Count="1" />
      <LineId Id="950" Count="0" />
      <LineId Id="933" Count="0" />
      <LineId Id="951" Count="0" />
      <LineId Id="921" Count="0" />
      <LineId Id="923" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="941" Count="0" />
      <LineId Id="778" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="780" Count="1" />
      <LineId Id="779" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="952" Count="1" />
      <LineId Id="771" Count="0" />
      <LineId Id="1006" Count="1" />
      <LineId Id="772" Count="0" />
      <LineId Id="1005" Count="0" />
      <LineId Id="1004" Count="0" />
      <LineId Id="830" Count="0" />
      <LineId Id="775" Count="0" />
      <LineId Id="931" Count="1" />
      <LineId Id="776" Count="0" />
      <LineId Id="747" Count="0" />
      <LineId Id="1135" Count="0" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1138" Count="0" />
      <LineId Id="1146" Count="1" />
      <LineId Id="1137" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="755" Count="0" />
      <LineId Id="716" Count="20" />
      <LineId Id="789" Count="0" />
      <LineId Id="738" Count="0" />
      <LineId Id="790" Count="0" />
      <LineId Id="740" Count="1" />
      <LineId Id="962" Count="0" />
      <LineId Id="964" Count="13" />
      <LineId Id="996" Count="0" />
      <LineId Id="978" Count="5" />
      <LineId Id="963" Count="0" />
      <LineId Id="742" Count="3" />
      <LineId Id="349" Count="0" />
      <LineId Id="1068" Count="1" />
      <LineId Id="1074" Count="1" />
      <LineId Id="1070" Count="0" />
      <LineId Id="1072" Count="1" />
      <LineId Id="1071" Count="0" />
      <LineId Id="1079" Count="1" />
      <LineId Id="998" Count="1" />
      <LineId Id="1077" Count="0" />
      <LineId Id="758" Count="3" />
      <LineId Id="763" Count="0" />
      <LineId Id="757" Count="0" />
      <LineId Id="943" Count="5" />
      <LineId Id="942" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>