<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="DomeControl" Id="{0e02434d-920e-4c0f-81fc-5ff7d5573875}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM DomeControl
VAR_INPUT
	// enable the dome azimuth
	enable:		BOOL;
	// reset the dome axis after an error
	Reset:		BOOL;
	// rotate the dome left (ccw)
	left:		BOOL;
	// rotate the dome right (cw)
	right: 		BOOL;
	// open the dome
	OpenDome:	BOOL;
	// close the dome
	CloseDome:	BOOL; // := TRUE;
	// turn on the light in the dome
	Light: 		BOOL;
	// azimuth position to move to
	position:	LREAL;
	// initiate homing
	HomeAxis:	BOOL;
END_VAR
VAR_OUTPUT
	// error condition on the azimuth drive
	Error:		BOOL;
	// NC axis error of the dome drive
	ErrorID:	UDINT;
	// error in the dome communication or drive
	DomeError:	BOOL;
	// dome is calibrated
	Calibrated:	BOOL;
END_VAR
VAR
	// dome axis function block
	DomeAxis: FB_Axis2;
	// current measured dome azimuth
	Azimuth_current: 	LREAL;
	// dome velocity
	ActVelo:			LREAL;
	//
	manual_enable:		BOOL;
	// command to move the azimuth to position
	move_azimuth:		BOOL;
	// dome is halted
	stop_done:			BOOL;
	// dome slit and flap are open
	DomeOpened:			BOOL;
	// dome is closed
	DomeClosed:			BOOL;
	FlapOpen:			BOOL;
	FlapClosed:			BOOL;
	SlitOpen:			BOOL;
	SlitClosed:			BOOL;
	DomeValid:			BOOL;
	// dome control word
   	DomeControlWord:	WORD;
	// last status Word
	LastStatus:			WORD;
	// start delay for the dehumidifier to prevent overcurrent
	DeHumidifierDelay:	TON;
	// permanent communication error
	PermanentError:		TON := (IN:=FALSE, PT:=T#30S);
	HomeDelay:			FB_TONTP;
	F_Azimuth_home:		F_TRIG;
	R_Azimuth_home:		R_TRIG;
	// direction invariant azimuth home signal;
	Azimuth_home:		BOOL;
	// time delay for dome light
	LightTimer:			TP;
	// next state
	nState:				BYTE := 0;
	// ADS communiaction busy
	bBusy: 				BOOL;
	// ADS communication error
	bError: 			BOOL;
	// ADS communication error id
	nErrID: 			UDINT;
	arrBool: 			ARRAY[0..3] OF BOOL;(* Server data to be written *)
	i: 					INT;
	// cycle timer for the ADS write cycle
	WriteCycle:			TON := (PT:=T#1S);
	
	fbWriteReq: ADSWRITE := ( NETID := '5.73.45.158.1.1', PORT := 851, TMOUT := DEFAULT_ADS_TIMEOUT );
	fbReadReq: ADSREAD := ( NETID := '5.73.45.158.1.1', PORT := 851, TMOUT := DEFAULT_ADS_TIMEOUT );
	DomeCalibration: MC_SetPosition;
	DomeCommEvent:	FB_Eventlog;
	DomeAxisEvent:	FB_Eventlog;
	DomeOpenEvent:	FB_Eventlog;
	DomeClosedEvent:	FB_Eventlog;
	DomeCalibrationEvent: FB_Eventlog;
	MQTTTimer : TON := (PT:=T#10S);
	// MQTT String
	sPayloadPub: STRING(255);
END_VAR
VAR CONSTANT
	tolerance:				LREAL := 3.0;
	calibration_position:	LREAL := 172.5;
	home_position:			LREAL := 180.0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* This program is responsible for the dome control. 
The dome is enabled unless the emergency button is pressed.
The two-button manual box steers the dome counter-clockwise or clockwise
If the dome is in automatic mode, homing is performed first.
The first section controls the signals for the inverter.
The second section controls the dome axis.
The third section handles the communications via ADS with the dome PLC.
*)

(* source: https://infosys.beckhoff.de/english.php?content=../content/1033/tcplclib_tc2_system/18014399220202635.html&id= *)
GVL_Dome.Inverter_Enable := FALSE;
GVL_Dome.Inverter_Velocity := 0;

enable := GVL_Safety.Run;

IF GVL_Dome.bVeloHigh THEN
	GVL_Dome.Inverter_Velocity := 32767;
	GVL_Dome.Inverter_Enable := TRUE;
END_IF

IF GVL_Dome.bVeloLow THEN
	GVL_Dome.Inverter_Velocity := 10000;
	GVL_Dome.Inverter_Enable := TRUE;
END_IF

IF GVL_Dome.bBreak THEN
	GVL_Dome.Inverter_Velocity := 0;
	GVL_Dome.Inverter_Enable := FALSE;
END_IF

GVL_Dome.Inverter_DirectionMinus := GVL_Dome.bDirectionPlus;

// if we are calibrated or encounter an error while calibrating, deactivate homing
IF DomeAxis.Calibrated OR Error THEN
	HomeAxis := FALSE;
	move_azimuth := FALSE;
END_IF

ActVelo := GVL_Dome.ActVelo;

// limit position to sane value
position := MODABS(position, 360.0);

// if we are calibrated, but azimuth is not, go to home position
HomeDelay(IN := DomeAxis.Calibrated, PT1 := T#5S, PT2 := T#100MS);

IF HomeDelay.Q THEN
	position := home_position;
	move_azimuth := TRUE;
END_IF

// if we are on automatic, tie the dome to the telescope
(*
IF DomeAxis.Calibrated AND TelescopeControl.power AND AzimuthElevationControl.calibrated THEN
	position := MODABS(TelescopeControl.azimuth_current, 360.0);
	move_azimuth := ABS(Azimuth_current - position) > tolerance;
END_IF

MC_GearIn
*)

Calibrated := DomeAxis.Calibrated;
// when homing, ensure that the position is the calibration position
IF HomeAxis THEN
	position := calibration_position;	
END_IF
F_Azimuth_home(CLK := GVL_Dome.Azimut_home);
R_Azimuth_home(CLK := GVL_Dome.Azimut_home);

Azimuth_home := (R_Azimuth_home.Q AND GVL_Dome.bDirectionPlus) OR 
				(F_Azimuth_home.Q AND GVL_Dome.bDirectionMinus);

// velocity = 2°/s or 180° in 81s, 360° in 120s (was 2.22)
// TODO: Reset does not propagate to the FB and therefor does not reset the error
DomeAxis(
	Enable := 		enable,
	Reset := 		reset,
	MoveAxis := 	move_azimuth,
	HomeAxis :=		HomeAxis,
	Position := 	position,
	Velocity := 	3.0,
	Jog_Forward :=	right OR GVL_Dome.Clockwise,
	Jog_Backwards := left OR GVL_Dome.CounterClockwise,
	bCalibrationCam := GVL_Dome.Azimut_home,
	isModuloAxis := TRUE,
	StopDone =>		stop_done,
	Error =>		error,
	ErrorID =>		ErrorID,
	ActualPosition => Azimuth_current,
	AxisRef	:= 		GVL_Dome.DomeAxisRef);

// re-calibrate the dome, if we pass the reference switch. execute only if enough time has passed since homing.
DomeCalibration(Axis := GVL_Dome.DomeAxisRef,
	Execute := Azimuth_home AND HomeDelay.Q,
	Position := calibration_position); // TODO: Options := ST_SetPositionOptions.ClearPositionLag
		
IF stop_done THEN
	move_azimuth := FALSE;
END_IF

// delay startup of the dehumidifiert to prevent power-spike
// turn off dehumidifier if dome is open
DeHumidifierDelay(IN := NOT OpenDome, PT := T#5S, Q => GVL_Dome.DeHumidifier);

// Light is switched off after 60 minutes or if Light signal is low
LightTimer(IN := Light, PT := T#60M);
GVL_Dome.Light := Light AND LightTimer.Q;

(* The remote section for moving parts of the dome starts here. *)
DomeControlWord.0 := TRUE;
IF CloseDome THEN
	OpenDome := FALSE;
	DomeControlWord.1 := FALSE; // CloseFlap
	DomeControlWord.2 := FALSE; // CloseSlit
ELSIF OpenDome THEN
	DomeControlWord.1 := TRUE; // OpenFlap
	DomeControlWord.2 := TRUE; // OpenSlit
END_IF

WriteCycle(IN := TRUE);

CASE nState OF
   0:	// check, if we are ready to write
		IF WriteCycle.Q THEN
			WriteCycle(IN := FALSE);
			
			fbWriteReq(WRITE := FALSE, BUSY=>bBusy, ERR=>bError, ERRID=>nErrID );
			nState := 1;
			IF bBusy OR bError THEN
				nState := 99;
			END_IF
		END_IF
   1:	// write the control word
		fbWriteReq(	IDXGRP := 16#4020, 
					IDXOFFS := 0, 
                  	LEN := SIZEOF(DomeControlWord), 
					SRCADDR := ADR(DomeControlWord), 
                  	WRITE := TRUE);
		nState := 2;
	2:	// check, if write succeeded
        fbWriteReq(WRITE := FALSE, BUSY=>bBusy, ERR=>bError, ERRID=>nErrID );
		nState := 3;   
		IF bBusy THEN
			bBusy := FALSE;
			nState := 2;
		END_IF
		IF bError THEN
			nState := 99;
		END_IF
	3:	// check, if we can read
		fbReadReq(READ := FALSE, BUSY=>bBusy, ERR=>bError, ERRID=>nErrID);
		nState := 4;
		IF bBusy THEN
			bBusy := FALSE;
			nState := 3;
		END_IF
		IF bError THEN
			nState := 99;
		END_IF
	4:	// read the control word
		fbReadReq(  IDXGRP := 16#4020, 
					IDXOFFS := 0, 
			  		LEN := SIZEOF( DomeControlWord ), 
					DESTADDR := ADR( DomeControlWord ), 
			  		READ := TRUE );
		nState := 5;            
	5:	// check, if read succeeded
		fbReadReq( READ := FALSE, BUSY=>bBusy, ERR=>bError, ERRID=>nErrID );
		IF bBusy THEN
			bBusy := FALSE;
			nState := 5;
		END_IF
		IF bError THEN
			nState := 99;
		END_IF
		IF NOT bBusy THEN
			IF NOT bError THEN
				DomeOpened := DomeControlWord.3;
				DomeClosed := DomeControlWord.4;
				FlapOpen   := DomeControlWord.5;
				FlapClosed := DomeControlWord.6;
				SlitOpen   := DomeControlWord.7;
				SlitClosed := DomeControlWord.8;
				DomeValid  := DomeControlWord.11;
				PermanentError.IN := FALSE;
				nState := 0;// Success: wait for write cycle
			END_IF
		END_IF
	99:	// error handling
		bBusy := FALSE;
		bError := FALSE;
		PermanentError.IN := TRUE;
		DomeControlWord := 0;
		nState := 0;
		CASE NErrID OF
			6: DomeCommEvent.OnMessage := 'ERR_TARGETPORTNOTFOUND';
			29: DomeCommEvent.OnMessage := 'ERR_AMSSYNC_TIMEOUT';
			1861: DomeCommEvent.OnMessage := 'ADSERR_CLIENT_SYNCTIMEOUT';
		ELSE
			DomeCommEvent.OnMessage := UDINT_TO_STRING(nErrID);
		END_CASE
END_CASE

DomeError := PermanentError.Q OR Error;

IF DomeOpened THEN
	OpenDome := FALSE;
ELSIF DomeClosed THEN
	CloseDome := FALSE;
END_IF

MQTTTimer(IN:=Enable);
IF MQTTTimer.Q THEN // publish new payload every second
	MQTTTimer(IN:=FALSE);
	sPayloadPub := 'dome,location=dome,host=CX-4E6032 ';
	sPayloadPub := APPEND(sPayloadPub, 'DomeAzimuth=', LREAL_TO_FMTSTR(Azimuth_current, 1, TRUE));
	sPayloadPub := APPEND(sPayloadPub, ',Calibrated=', BOOL_TO_STRING(Calibrated));	
	MQTTCommunication.fbMqttClient.Publish(	
					sTopic:= 'RoboTel/Telemetry', 
					pPayload:= ADR(sPayloadPub), 
					nPayloadSize:= LEN2(ADR(sPayloadPub)),
					eQoS:= TcIotMqttQos.AtMostOnceDelivery,
					bRetain:= FALSE, 
					bQueue:= FALSE );
END_IF

IF DomeControlWord <> LastStatus THEN
	LastStatus := DomeControlWord;
	sPayloadPub := 'dome,location=dome,host=CX-4E6032 ';
	sPayloadPub := APPEND(sPayloadPub, 'DomeClosed=', BOOL_TO_STRING(DomeClosed));
	sPayloadPub := APPEND(sPayloadPub, 'DomeOpened=', BOOL_TO_STRING(DomeOpened));
	IF FlapOpen THEN
		sPayloadPub := APPEND(sPayloadPub, ',FlapOpen=', BOOL_TO_STRING(FlapOpen));	
	END_IF
	IF FlapClosed THEN
		sPayloadPub := APPEND(sPayloadPub, ',FlapClosed=', BOOL_TO_STRING(FlapClosed));	
	END_IF
	IF SlitOpen THEN
		sPayloadPub := APPEND(sPayloadPub, ',SlitOpen=', BOOL_TO_STRING(SlitOpen));	
	END_IF
	IF SlitClosed THEN
		sPayloadPub := APPEND(sPayloadPub, ',SlitClosed=', BOOL_TO_STRING(SlitClosed));	
	END_IF
	MQTTCommunication.fbMqttClient.Publish(	
					sTopic:= 'RoboTel/Telemetry', 
					pPayload:= ADR(sPayloadPub), 
					nPayloadSize:= LEN2(ADR(sPayloadPub)),
					eQoS:= TcIotMqttQos.AtMostOnceDelivery,
					bRetain:= TRUE, 
					bQueue:= FALSE );

END_IF

DomeCommEvent(	Trigger := PermanentError.Q, 
					Level := ADSLOG_MSGTYPE_ERROR,
					FormatString := 'Dome communication error: %s',
					OffMessage := 'OK',
					OffLevel := ADSLOG_MSGTYPE_HINT);
DomeAxisEvent(	
	Trigger := 		Error, 
	Level := 		ADSLOG_MSGTYPE_ERROR,
	FormatString :=	'Dome axis Error: %s',
	OnMessage := 	NCError_TO_STRING(ErrorID),
	OffMEssage := 	'OK');
				
DomeCalibrationEvent(	
	Trigger := 		GVL_Dome.Azimut_home, 
	Level := 		ADSLOG_MSGTYPE_HINT,
	OnMessage := 	'Dome calibration: OK');

DomeOpenEvent(
	Trigger := 		DomeOpened, 
	Level := 		ADSLOG_MSGTYPE_WARN,
	OnMessage := 	'Dome is open.');
	
DomeClosedEvent(
	Trigger := 		DomeClosed, 
	Level := 		ADSLOG_MSGTYPE_HINT,
	OnMessage := 	'Dome is closed.');
	]]></ST>
    </Implementation>
    <LineIds Name="DomeControl">
      <LineId Id="1008" Count="0" />
      <LineId Id="1223" Count="2" />
      <LineId Id="1011" Count="2" />
      <LineId Id="1010" Count="0" />
      <LineId Id="1009" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="650" Count="0" />
      <LineId Id="673" Count="0" />
      <LineId Id="1215" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="636" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="639" Count="0" />
      <LineId Id="647" Count="0" />
      <LineId Id="638" Count="0" />
      <LineId Id="668" Count="4" />
      <LineId Id="640" Count="2" />
      <LineId Id="648" Count="0" />
      <LineId Id="643" Count="2" />
      <LineId Id="1425" Count="0" />
      <LineId Id="1216" Count="0" />
      <LineId Id="955" Count="0" />
      <LineId Id="1209" Count="0" />
      <LineId Id="1432" Count="0" />
      <LineId Id="960" Count="0" />
      <LineId Id="1449" Count="1" />
      <LineId Id="1431" Count="0" />
      <LineId Id="1429" Count="0" />
      <LineId Id="1426" Count="0" />
      <LineId Id="1430" Count="0" />
      <LineId Id="1419" Count="0" />
      <LineId Id="1438" Count="0" />
      <LineId Id="1435" Count="0" />
      <LineId Id="1404" Count="0" />
      <LineId Id="1420" Count="0" />
      <LineId Id="1423" Count="0" />
      <LineId Id="1421" Count="0" />
      <LineId Id="1424" Count="0" />
      <LineId Id="1405" Count="0" />
      <LineId Id="1433" Count="0" />
      <LineId Id="1406" Count="2" />
      <LineId Id="1403" Count="0" />
      <LineId Id="1452" Count="0" />
      <LineId Id="1451" Count="0" />
      <LineId Id="1427" Count="0" />
      <LineId Id="1454" Count="0" />
      <LineId Id="1428" Count="0" />
      <LineId Id="1414" Count="1" />
      <LineId Id="1418" Count="0" />
      <LineId Id="1417" Count="0" />
      <LineId Id="1443" Count="0" />
      <LineId Id="1445" Count="1" />
      <LineId Id="1001" Count="0" />
      <LineId Id="1447" Count="0" />
      <LineId Id="1444" Count="0" />
      <LineId Id="1000" Count="0" />
      <LineId Id="871" Count="0" />
      <LineId Id="913" Count="0" />
      <LineId Id="925" Count="0" />
      <LineId Id="914" Count="1" />
      <LineId Id="1413" Count="0" />
      <LineId Id="916" Count="0" />
      <LineId Id="1434" Count="0" />
      <LineId Id="919" Count="1" />
      <LineId Id="950" Count="0" />
      <LineId Id="933" Count="0" />
      <LineId Id="951" Count="0" />
      <LineId Id="921" Count="0" />
      <LineId Id="923" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="941" Count="0" />
      <LineId Id="778" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="780" Count="1" />
      <LineId Id="779" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="952" Count="1" />
      <LineId Id="771" Count="0" />
      <LineId Id="1006" Count="1" />
      <LineId Id="772" Count="0" />
      <LineId Id="1005" Count="0" />
      <LineId Id="1004" Count="0" />
      <LineId Id="830" Count="0" />
      <LineId Id="775" Count="0" />
      <LineId Id="931" Count="1" />
      <LineId Id="747" Count="0" />
      <LineId Id="1135" Count="0" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1345" Count="1" />
      <LineId Id="1138" Count="0" />
      <LineId Id="1146" Count="1" />
      <LineId Id="1137" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="755" Count="0" />
      <LineId Id="716" Count="5" />
      <LineId Id="726" Count="0" />
      <LineId Id="1777" Count="0" />
      <LineId Id="1818" Count="0" />
      <LineId Id="1778" Count="1" />
      <LineId Id="731" Count="0" />
      <LineId Id="1782" Count="0" />
      <LineId Id="1792" Count="0" />
      <LineId Id="1783" Count="3" />
      <LineId Id="1797" Count="1" />
      <LineId Id="1793" Count="0" />
      <LineId Id="1819" Count="0" />
      <LineId Id="1810" Count="0" />
      <LineId Id="1958" Count="0" />
      <LineId Id="1811" Count="0" />
      <LineId Id="1794" Count="0" />
      <LineId Id="1809" Count="0" />
      <LineId Id="1795" Count="1" />
      <LineId Id="732" Count="0" />
      <LineId Id="968" Count="0" />
      <LineId Id="1820" Count="0" />
      <LineId Id="1802" Count="1" />
      <LineId Id="1959" Count="0" />
      <LineId Id="1804" Count="0" />
      <LineId Id="1806" Count="2" />
      <LineId Id="1801" Count="0" />
      <LineId Id="969" Count="0" />
      <LineId Id="1799" Count="0" />
      <LineId Id="970" Count="0" />
      <LineId Id="1800" Count="0" />
      <LineId Id="971" Count="3" />
      <LineId Id="1813" Count="1" />
      <LineId Id="1960" Count="0" />
      <LineId Id="1812" Count="0" />
      <LineId Id="1816" Count="1" />
      <LineId Id="1815" Count="0" />
      <LineId Id="975" Count="2" />
      <LineId Id="996" Count="0" />
      <LineId Id="1927" Count="3" />
      <LineId Id="1932" Count="0" />
      <LineId Id="1898" Count="0" />
      <LineId Id="978" Count="0" />
      <LineId Id="982" Count="1" />
      <LineId Id="1889" Count="1" />
      <LineId Id="1961" Count="0" />
      <LineId Id="1891" Count="0" />
      <LineId Id="1933" Count="0" />
      <LineId Id="1892" Count="0" />
      <LineId Id="1920" Count="0" />
      <LineId Id="1996" Count="1" />
      <LineId Id="1922" Count="0" />
      <LineId Id="1924" Count="2" />
      <LineId Id="349" Count="0" />
      <LineId Id="1068" Count="0" />
      <LineId Id="999" Count="0" />
      <LineId Id="1935" Count="2" />
      <LineId Id="1939" Count="2" />
      <LineId Id="1522" Count="2" />
      <LineId Id="1982" Count="1" />
      <LineId Id="1986" Count="0" />
      <LineId Id="1979" Count="0" />
      <LineId Id="1989" Count="5" />
      <LineId Id="1988" Count="0" />
      <LineId Id="1978" Count="0" />
      <LineId Id="1980" Count="1" />
      <LineId Id="1984" Count="0" />
      <LineId Id="1622" Count="0" />
      <LineId Id="1625" Count="0" />
      <LineId Id="1995" Count="0" />
      <LineId Id="1705" Count="0" />
      <LineId Id="1942" Count="1" />
      <LineId Id="1945" Count="2" />
      <LineId Id="1952" Count="5" />
      <LineId Id="1628" Count="6" />
      <LineId Id="1553" Count="0" />
      <LineId Id="1077" Count="0" />
      <LineId Id="758" Count="3" />
      <LineId Id="763" Count="0" />
      <LineId Id="757" Count="0" />
      <LineId Id="943" Count="5" />
      <LineId Id="942" Count="0" />
      <LineId Id="1283" Count="3" />
      <LineId Id="1964" Count="0" />
      <LineId Id="1282" Count="0" />
      <LineId Id="1966" Count="3" />
      <LineId Id="1971" Count="3" />
      <LineId Id="1970" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>