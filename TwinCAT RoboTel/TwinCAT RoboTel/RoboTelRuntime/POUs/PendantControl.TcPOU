<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="PendantControl" Id="{4c9494b1-b987-44f6-88ae-faae341979f2}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PendantControl
VAR
	Selection: UINT;
	Cover3_state: RS;
	Cover3_axis: 		MDP5001_511_733_5131DD77;
	Cover3_control:		FB_DCAxis;
	Cover2_axis: 		MDP5001_511_733_5131DD77;
	Cover2_control:		FB_DCAxis;
	Nasmyth_axis:		MDP5001_511_733_5131DD77;
	Nasmyth_control:	FB_DCAxis;
	error:				BOOL;
	Nasmyth_delay:		TON;
	Nasmyth_unlock,
	Nasmyth_unlocked:	BOOL;
	Focusstate,
	Elevationstate:	RS;
	FocusAxisJog:		FB_AxisJog;
	DerotatorAxisJog:	FB_AxisJog;
	ElevationAxisJog:	FB_AxisJog;
	AzimuthAxisJog:		FB_AxisJog;
	
	manual,
	enable,
	reset,
	up,
	down,
	left,
	right,
	manual_hydraulics_start,
	manual_hydraulics_stop:		BOOL;
	
	brake_state:	RS;
	brake_open : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Selection := 1*BOOL_TO_UINT(GVL_pendant_control.BCD1) + 
			 2*BOOL_TO_UINT(GVL_pendant_control.BCD2) + 
			 4*BOOL_TO_UINT(GVL_pendant_control.BCD4) +
			 8*BOOL_TO_UINT(GVL_pendant_control.BCD8);

GVL_pendant_control.lamp_left := FALSE;
GVL_pendant_control.lamp_right := FALSE;
GVL_pendant_control.lamp_up := FALSE;
GVL_pendant_control.lamp_down := FALSE;
manual := GVL_pendant_control.key_switch;
enable := GVL_pendant_control.start_switch;
reset := GVL_pendant_control.reset_switch;
up := GVL_pendant_control.direction_up;
down := GVL_pendant_control.direction_down;
left := GVL_pendant_control.direction_left;
right := GVL_pendant_control.direction_right;

GVL_pendant_control.lamp_error := GVL_Main.lamp_error;
FanControl(enable := NOT manual);
FocusControl(manual := manual);
//GVL_Telescope.horn := reset;

Nasmyth_delay(IN := GVL_Telescope.nasmyth_lock,
				PT := T#500MS,
				Q => Nasmyth_unlocked);


CASE Selection OF
	1:	GVL_pendant_control.lamp_left := TRUE;
		GVL_pendant_control.lamp_right := TRUE;
	2: Cover2_control(open := up,
						close := down,
						enable := manual AND GVL_Telescope.cover3_closed,
						reset := MAIN.reset,
						limit_open := GVL_Telescope.cover2_open,
						limit_close := GVL_Telescope.cover2_closed,
						error => error,
						axis_ref := Cover2_axis);
		GVL_pendant_control.lamp_up := GVL_Telescope.cover2_open;
		GVL_pendant_control.lamp_down := GVL_Telescope.cover2_closed;
 
	
	3:  
		 Cover3_control(open := up,
						close := down,
						enable := manual,
						reset := MAIN.reset,
						limit_open := GVL_Telescope.cover3_open,
						limit_close := GVL_Telescope.cover3_closed,
						error => error,
						axis_ref := Cover3_axis);
		GVL_pendant_control.lamp_up := GVL_Telescope.cover3_open;
		GVL_pendant_control.lamp_down := GVL_Telescope.cover3_closed;
	4:
		GVL_Telescope.nasmyth_lock :=  manual AND 
										( left OR 
 										right OR
										enable);
										
		 Nasmyth_control(open := left AND Nasmyth_unlocked,
						close := right AND Nasmyth_unlocked,
						enable := GVL_pendant_control.key_switch,
						reset := MAIN.reset,
						limit_open := NOT GVL_Telescope.nasmyth_limit_right,
						limit_close := NOT GVL_Telescope.nasmyth_limit_left,
						error => error,
						velocity := 18000,
						axis_ref := Nasmyth_axis);
		GVL_pendant_control.lamp_left := GVL_Telescope.nasmyth_limit_left;
		GVL_pendant_control.lamp_right := GVL_Telescope.nasmyth_limit_right;
		
	5:	GVL_pendant_control.lamp_up := NOT GVL_Telescope.focus_limit_far;
		GVL_pendant_control.lamp_down := NOT GVL_Telescope.focus_limit_near;

		Focusstate(SET := manual AND enable,
					RESET1 := manual AND reset,
					Q1 => GVL_Telescope.focus_lock);
		FocusAxisJog(bPowerEnable := manual AND Focusstate.Q1,
						bEnable_Positive := NOT GVL_Telescope.focus_limit_far,
						bEnable_Negative := NOT GVL_Telescope.focus_limit_near,
						bForward := up,
						bBackward := down,
						bReset := manual AND reset,
						bStop := manual AND enable,
						bErr => error,
						stAxis :=	GVL_Telescope.FocusAxisRef);
						
	6:	GVL_pendant_control.lamp_left := TRUE;
		GVL_pendant_control.lamp_right := TRUE;
		DeRotatorAxisJog(bPowerEnable := manual AND Main.power_OK,
						bEnable_Positive := TRUE,
						bEnable_Negative := TRUE,
						bForward := right,
						bBackward := left,
						bReset := manual AND reset,
						bStop := manual AND enable,
						bErr => error,
						stAxis :=	GVL_Telescope.DerotatorAxisRef);
	7:	ElevationState(SET := enable, RESET1 := Elevationstate.Q1 AND enable);
		GVL_pendant_control.lamp_up := TRUE;
		GVL_pendant_control.lamp_down := TRUE;
		ElevationAxisJog(bPowerEnable := manual AND GVL_Main.brake_clearing AND Main.power_OK,
						bEnable_Positive := GVL_Main.brake_clearing,
						bEnable_Negative := GVL_Main.brake_clearing,
						bForward := up,
						bBackward := down,
						bReset := manual AND reset,
						bStop := manual AND enable,
						bErr => error,
						stAxis :=	GVL_Telescope.ElevationAxisRef);
	8:	GVL_pendant_control.lamp_left := TRUE;
		GVL_pendant_control.lamp_right := TRUE;
		AzimuthAxisJog(bPowerEnable := manual AND GVL_Main.brake_clearing AND Main.power_OK,
						bEnable_Positive := GVL_Main.brake_clearing,
						bEnable_Negative := GVL_Main.brake_clearing,
						bForward := right,
						bBackward := left,
						bReset := manual AND reset,
						bStop := manual AND enable,
						bErr => error,
						stAxis :=	GVL_Telescope.AzimuthAxisRef);
	
	15:	GVL_pendant_control.lamp_left := TRUE;
		GVL_pendant_control.lamp_right := TRUE;
		GVL_pendant_control.lamp_up := HydraulicsControl.oil_pressure_OK AND NOT brake_open;
		GVL_pendant_control.lamp_down := HydraulicsControl.oil_pressure_OK AND brake_open;
		manual_hydraulics_start := manual AND enable;
		manual_hydraulics_stop := manual AND reset;
		brake_state(SET := up,
					Reset1 := down,
					Q1 => brake_open);
		
END_CASE

GVL_pendant_control.lamp_error := Main.error;]]></ST>
    </Implementation>
    <LineIds Name="PendantControl">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="17" Count="2" />
      <LineId Id="25" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="318" Count="5" />
      <LineId Id="326" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="324" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="158" Count="3" />
      <LineId Id="10" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="95" Count="5" />
      <LineId Id="105" Count="2" />
      <LineId Id="101" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="109" Count="8" />
      <LineId Id="81" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="139" Count="3" />
      <LineId Id="180" Count="0" />
      <LineId Id="129" Count="6" />
      <LineId Id="155" Count="0" />
      <LineId Id="136" Count="2" />
      <LineId Id="241" Count="0" />
      <LineId Id="236" Count="1" />
      <LineId Id="126" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="197" Count="1" />
      <LineId Id="225" Count="4" />
      <LineId Id="251" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="238" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="218" Count="3" />
      <LineId Id="249" Count="1" />
      <LineId Id="247" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="289" Count="8" />
      <LineId Id="285" Count="0" />
      <LineId Id="299" Count="10" />
      <LineId Id="298" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="233" Count="1" />
      <LineId Id="244" Count="1" />
      <LineId Id="256" Count="1" />
      <LineId Id="259" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="121" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>